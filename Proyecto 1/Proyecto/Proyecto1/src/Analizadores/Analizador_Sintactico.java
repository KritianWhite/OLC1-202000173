
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\004\003\000\002\004\003\000\002" +
    "\005\010\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\010\003\000\002\010\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\003\000\002" +
    "\020\005\000\002\020\005\000\002\020\003\000\002\021" +
    "\005\000\002\021\003\000\002\017\005\000\002\017\003" +
    "\000\002\006\005\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\022\003\000\002\022\003\000\002\023\007\000\002\024" +
    "\006\000\002\024\004\000\002\025\006\000\002\026\003" +
    "\000\002\027\004\000\002\027\003\000\002\027\003\000" +
    "\002\027\004\000\002\027\003\000\002\030\006\000\002" +
    "\030\004\000\002\032\007\000\002\031\005\000\002\033" +
    "\003\000\002\033\003\000\002\034\012\000\002\037\003" +
    "\000\002\037\003\000\002\035\004\000\002\036\006\000" +
    "\002\040\007\000\002\041\006\000\002\012\003\000\002" +
    "\012\004\000\002\042\006\000\002\043\010\000\002\045" +
    "\005\000\002\045\003\000\002\044\004\000\002\013\003" +
    "\000\002\013\004\000\002\046\010\000\002\047\012\000" +
    "\002\050\003\000\002\050\002\000\002\051\005\000\002" +
    "\052\003\000\002\052\003\000\002\052\002\000\002\053" +
    "\007\000\002\054\010\000\002\014\003\000\002\014\003" +
    "\000\002\055\004\000\002\055\004\000\002\056\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\004\004\004\001\002\000\062\006\021\012" +
    "\070\014\011\015\015\017\030\022\033\026\063\030\062" +
    "\034\042\035\053\036\067\041\016\043\056\044\024\045" +
    "\035\046\057\065\043\074\044\075\041\076\027\077\036" +
    "\100\023\102\045\103\010\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\104\005\ufffd\006\ufffd" +
    "\012\ufffd\014\ufffd\015\ufffd\016\ufffd\017\ufffd\021\ufffd\022" +
    "\ufffd\025\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd" +
    "\034\ufffd\035\ufffd\036\ufffd\040\ufffd\041\ufffd\042\ufffd\043" +
    "\ufffd\044\ufffd\045\ufffd\046\ufffd\065\ufffd\074\ufffd\075\ufffd" +
    "\076\ufffd\077\ufffd\100\ufffd\102\ufffd\103\ufffd\001\002\000" +
    "\130\005\uffe4\006\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4" +
    "\065\uffe4\066\uffe4\067\uffe4\073\uffe4\074\uffe4\075\uffe4\076" +
    "\uffe4\077\uffe4\100\uffe4\102\uffe4\103\uffe4\001\002\000\004" +
    "\013\255\001\002\000\104\005\uffda\006\uffda\012\uffda\014" +
    "\uffda\015\uffda\016\uffda\017\uffda\021\uffda\022\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\034\uffda\035" +
    "\uffda\036\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\046\uffda\065\uffda\074\uffda\075\uffda\076\uffda\077" +
    "\uffda\100\uffda\102\uffda\103\uffda\001\002\000\104\005\uffdb" +
    "\006\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb\021" +
    "\uffdb\022\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\034\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb\042" +
    "\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\065\uffdb\074\uffdb" +
    "\075\uffdb\076\uffdb\077\uffdb\100\uffdb\102\uffdb\103\uffdb\001" +
    "\002\000\104\005\ufffb\006\ufffb\012\ufffb\014\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\021\ufffb\022\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\030\ufffb\031\ufffb\032\ufffb\034\ufffb\035\ufffb\036\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\065\ufffb\074\ufffb\075\ufffb\076\ufffb\077\ufffb\100\ufffb" +
    "\102\ufffb\103\ufffb\001\002\000\012\062\101\063\077\064" +
    "\100\100\102\001\002\000\004\100\234\001\002\000\004" +
    "\005\233\001\002\000\004\011\231\001\002\000\004\100" +
    "\023\001\002\000\004\067\223\001\002\000\010\007\uffe2" +
    "\011\uffe2\070\221\001\002\000\114\005\ufff3\006\ufff3\010" +
    "\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\021\ufff3" +
    "\022\ufff3\025\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\065\ufff3\066" +
    "\ufff3\070\ufff3\074\ufff3\075\ufff3\076\ufff3\077\ufff3\100\ufff3" +
    "\102\ufff3\103\ufff3\001\002\000\104\005\uffaf\006\uffaf\012" +
    "\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\046\uffaf\065\uffaf\074\uffaf\075\uffaf\076" +
    "\uffaf\077\uffaf\100\uffaf\102\uffaf\103\uffaf\001\002\000\104" +
    "\005\uffdc\006\uffdc\012\uffdc\014\uffdc\015\uffdc\016\uffdc\017" +
    "\uffdc\021\uffdc\022\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\034\uffdc\035\uffdc\036\uffdc\040\uffdc\041" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\065\uffdc" +
    "\074\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc\102\uffdc\103" +
    "\uffdc\001\002\000\116\005\uffec\006\uffec\012\uffec\014\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\034\uffec\035\uffec\036\uffec\040\uffec\041\uffec\042" +
    "\uffec\043\uffec\044\uffec\045\uffec\046\uffec\065\uffec\067\uffec" +
    "\073\uffec\074\uffec\075\uffec\076\uffec\077\uffec\100\uffec\102" +
    "\uffec\103\uffec\001\002\000\010\065\043\100\203\103\010" +
    "\001\002\000\104\005\uffdd\006\uffdd\012\uffdd\014\uffdd\015" +
    "\uffdd\016\uffdd\017\uffdd\021\uffdd\022\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\046\uffdd\065\uffdd\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100" +
    "\uffdd\102\uffdd\103\uffdd\001\002\000\104\005\ufff8\006\ufff8" +
    "\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8\021\ufff8\022" +
    "\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8" +
    "\034\ufff8\035\ufff8\036\ufff8\040\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\045\ufff8\046\ufff8\065\ufff8\074\ufff8\075\ufff8" +
    "\076\ufff8\077\ufff8\100\ufff8\102\ufff8\103\ufff8\001\002\000" +
    "\004\100\170\001\002\000\104\005\uffff\006\uffff\012\uffff" +
    "\014\uffff\015\uffff\016\uffff\017\uffff\021\uffff\022\uffff\025" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\034\uffff" +
    "\035\uffff\036\uffff\040\uffff\041\uffff\042\uffff\043\uffff\044" +
    "\uffff\045\uffff\046\uffff\065\uffff\074\uffff\075\uffff\076\uffff" +
    "\077\uffff\100\uffff\102\uffff\103\uffff\001\002\000\114\005" +
    "\ufff2\006\ufff2\010\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2" +
    "\017\ufff2\021\ufff2\022\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2" +
    "\040\ufff2\041\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046" +
    "\ufff2\065\ufff2\066\ufff2\070\ufff2\074\ufff2\075\ufff2\076\ufff2" +
    "\077\ufff2\100\ufff2\102\ufff2\103\ufff2\001\002\000\116\005" +
    "\uffed\006\uffed\012\uffed\014\uffed\015\uffed\016\uffed\017\uffed" +
    "\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\027\uffed\030\uffed\031\uffed\032\uffed\034\uffed\035\uffed" +
    "\036\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\065\uffed\067\uffed\073\uffed\074\uffed\075\uffed" +
    "\076\uffed\077\uffed\100\uffed\102\uffed\103\uffed\001\002\000" +
    "\104\005\uffde\006\uffde\012\uffde\014\uffde\015\uffde\016\uffde" +
    "\017\uffde\021\uffde\022\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\032\uffde\034\uffde\035\uffde\036\uffde\040\uffde" +
    "\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde\065" +
    "\uffde\074\uffde\075\uffde\076\uffde\077\uffde\100\uffde\102\uffde" +
    "\103\uffde\001\002\000\104\005\uffae\006\uffae\012\uffae\014" +
    "\uffae\015\uffae\016\uffae\017\uffae\021\uffae\022\uffae\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae\034\uffae\035" +
    "\uffae\036\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\046\uffae\065\uffae\074\uffae\075\uffae\076\uffae\077" +
    "\uffae\100\uffae\102\uffae\103\uffae\001\002\000\104\005\ufff6" +
    "\006\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\021" +
    "\ufff6\022\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\034\ufff6\035\ufff6\036\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\065\ufff6\074\ufff6" +
    "\075\ufff6\076\ufff6\077\ufff6\100\ufff6\102\ufff6\103\ufff6\001" +
    "\002\000\004\100\167\001\002\000\006\065\043\103\010" +
    "\001\002\000\104\005\ufff7\006\ufff7\012\ufff7\014\ufff7\015" +
    "\ufff7\016\ufff7\017\ufff7\021\ufff7\022\ufff7\025\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\031\ufff7\032\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7" +
    "\046\ufff7\065\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100" +
    "\ufff7\102\ufff7\103\ufff7\001\002\000\116\005\uffee\006\uffee" +
    "\012\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\032\uffee\034\uffee\035\uffee\036\uffee\040" +
    "\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee" +
    "\065\uffee\067\uffee\073\uffee\074\uffee\075\uffee\076\uffee\077" +
    "\uffee\100\uffee\102\uffee\103\uffee\001\002\000\116\005\ufff0" +
    "\006\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020" +
    "\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0" +
    "\027\ufff0\030\ufff0\031\ufff0\032\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\065\ufff0\067\ufff0\073\ufff0\074\ufff0\075\ufff0\076" +
    "\ufff0\077\ufff0\100\ufff0\102\ufff0\103\ufff0\001\002\000\104" +
    "\005\ufffa\006\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\021\ufffa\022\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\034\ufffa\035\ufffa\036\ufffa\040\ufffa\041" +
    "\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\065\ufffa" +
    "\074\ufffa\075\ufffa\076\ufffa\077\ufffa\100\ufffa\102\ufffa\103" +
    "\ufffa\001\002\000\104\005\ufff9\006\ufff9\012\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\021\ufff9\022\ufff9\025\ufff9\026" +
    "\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\065\ufff9\074\ufff9\075\ufff9\076\ufff9\077\ufff9" +
    "\100\ufff9\102\ufff9\103\ufff9\001\002\000\104\005\uffe0\006" +
    "\uffe0\012\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\021\uffe0" +
    "\022\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\045\uffe0\046\uffe0\065\uffe0\074\uffe0\075" +
    "\uffe0\076\uffe0\077\uffe0\100\uffe0\102\uffe0\103\uffe0\001\002" +
    "\000\122\005\uffef\006\uffef\012\uffef\014\uffef\015\uffef\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024\uffef" +
    "\025\uffef\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\034" +
    "\uffef\035\uffef\036\uffef\040\uffef\041\uffef\042\uffef\043\uffef" +
    "\044\uffef\045\uffef\046\uffef\051\161\052\162\065\uffef\067" +
    "\uffef\073\uffef\074\uffef\075\uffef\076\uffef\077\uffef\100\uffef" +
    "\102\uffef\103\uffef\001\002\000\004\102\157\001\002\000" +
    "\104\005\uffdf\006\uffdf\012\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\021\uffdf\022\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\034\uffdf\035\uffdf\036\uffdf\040\uffdf" +
    "\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\065" +
    "\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\102\uffdf" +
    "\103\uffdf\001\002\000\130\005\uffe9\006\uffe9\012\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031" +
    "\uffe9\032\uffe9\034\uffe9\035\uffe9\036\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\051\uffe9\052" +
    "\uffe9\053\154\054\153\065\uffe9\066\uffe9\067\uffe9\073\uffe9" +
    "\074\uffe9\075\uffe9\076\uffe9\077\uffe9\100\uffe9\102\uffe9\103" +
    "\uffe9\001\002\000\114\005\ufff4\006\ufff4\010\ufff4\012\ufff4" +
    "\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4\022\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\034\ufff4" +
    "\035\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\046\ufff4\065\ufff4\066\ufff4\070\ufff4" +
    "\074\ufff4\075\ufff4\076\ufff4\077\ufff4\100\ufff4\102\ufff4\103" +
    "\ufff4\001\002\000\114\005\ufff1\006\ufff1\010\ufff1\012\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\017\ufff1\021\ufff1\022\ufff1\025" +
    "\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\034\ufff1" +
    "\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043" +
    "\ufff1\044\ufff1\045\ufff1\046\ufff1\065\ufff1\066\ufff1\070\ufff1" +
    "\074\ufff1\075\ufff1\076\ufff1\077\ufff1\100\ufff1\102\ufff1\103" +
    "\ufff1\001\002\000\106\005\uffb2\006\uffb2\012\uffb2\014\uffb2" +
    "\015\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\131\034\uffb2" +
    "\035\uffb2\036\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\046\uffb2\065\uffb2\074\uffb2\075\uffb2\076\uffb2" +
    "\077\uffb2\100\uffb2\102\uffb2\103\uffb2\001\002\000\104\005" +
    "\uffbb\006\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\021\uffbb\022\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031" +
    "\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb\040\uffbb\041\uffbb" +
    "\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\065\uffbb\074" +
    "\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\102\uffbb\103\uffbb" +
    "\001\002\000\062\006\021\012\070\014\011\015\015\017" +
    "\030\022\033\026\063\030\062\034\042\035\053\036\067" +
    "\041\016\043\056\044\024\045\035\046\057\065\043\074" +
    "\044\075\041\076\027\077\036\100\023\102\045\103\010" +
    "\001\002\000\012\062\101\063\077\064\100\100\102\001" +
    "\002\000\130\005\uffe6\006\uffe6\012\uffe6\014\uffe6\015\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6" +
    "\034\uffe6\035\uffe6\036\uffe6\040\uffe6\041\uffe6\042\uffe6\043" +
    "\uffe6\044\uffe6\045\uffe6\046\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\065\uffe6\066\uffe6\067\uffe6\073\uffe6\074\uffe6\075" +
    "\uffe6\076\uffe6\077\uffe6\100\uffe6\102\uffe6\103\uffe6\001\002" +
    "\000\106\005\uffb2\006\uffb2\012\uffb2\014\uffb2\015\uffb2\016" +
    "\uffb2\017\uffb2\021\uffb2\022\uffb2\025\uffb2\026\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\131\034\uffb2\035\uffb2\036" +
    "\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\065\uffb2\074\uffb2\075\uffb2\076\uffb2\077\uffb2\100" +
    "\uffb2\102\uffb2\103\uffb2\001\002\000\104\005\uffc2\006\uffc2" +
    "\012\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\021\uffc2\022" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2" +
    "\034\uffc2\035\uffc2\036\uffc2\040\uffc2\041\uffc2\042\uffc2\043" +
    "\uffc2\044\uffc2\045\uffc2\046\uffc2\065\uffc2\074\uffc2\075\uffc2" +
    "\076\uffc2\077\uffc2\100\uffc2\102\uffc2\103\uffc2\001\002\000" +
    "\004\100\114\001\002\000\012\062\101\063\077\064\100" +
    "\100\102\001\002\000\104\005\ufffe\006\ufffe\012\ufffe\014" +
    "\ufffe\015\ufffe\016\ufffe\017\ufffe\021\ufffe\022\ufffe\025\ufffe" +
    "\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\034\ufffe\035" +
    "\ufffe\036\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe" +
    "\045\ufffe\046\ufffe\065\ufffe\074\ufffe\075\ufffe\076\ufffe\077" +
    "\ufffe\100\ufffe\102\ufffe\103\ufffe\001\002\000\004\016\076" +
    "\001\002\000\104\005\ufffc\006\ufffc\012\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\017\ufffc\021\ufffc\022\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\030\ufffc\031\ufffc\032\ufffc\034\ufffc\035\ufffc\036" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc" +
    "\046\ufffc\065\ufffc\074\ufffc\075\ufffc\076\ufffc\077\ufffc\100" +
    "\ufffc\102\ufffc\103\ufffc\001\002\000\004\021\075\001\002" +
    "\000\104\005\uffce\006\uffce\012\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\021\uffce\022\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\034\uffce\035\uffce\036\uffce\040" +
    "\uffce\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce" +
    "\065\uffce\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce\102" +
    "\uffce\103\uffce\001\002\000\104\005\uffd7\006\uffd7\012\uffd7" +
    "\014\uffd7\015\uffd7\016\uffd7\017\uffd7\021\uffd7\022\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\034\uffd7" +
    "\035\uffd7\036\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\065\uffd7\074\uffd7\075\uffd7\076\uffd7" +
    "\077\uffd7\100\uffd7\102\uffd7\103\uffd7\001\002\000\110\005" +
    "\uffd2\006\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016\uffd2" +
    "\017\uffd2\020\uffd2\021\uffd2\022\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\065\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2" +
    "\102\uffd2\103\uffd2\001\002\000\012\062\101\063\077\064" +
    "\100\100\102\001\002\000\110\005\uffd3\006\uffd3\012\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\022\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\034\uffd3\035\uffd3\036\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\065\uffd3\074\uffd3" +
    "\075\uffd3\076\uffd3\077\uffd3\100\uffd3\102\uffd3\103\uffd3\001" +
    "\002\000\112\005\uffd0\006\uffd0\012\uffd0\013\uffd0\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\034\uffd0" +
    "\035\uffd0\036\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\061\112\065\uffd0\074\uffd0\075\uffd0" +
    "\076\uffd0\077\uffd0\100\uffd0\102\uffd0\103\uffd0\001\002\000" +
    "\064\006\021\012\070\013\105\014\011\015\015\017\030" +
    "\022\033\026\063\030\062\034\042\035\053\036\067\041" +
    "\016\043\056\044\024\045\035\046\057\065\043\074\044" +
    "\075\041\076\027\077\036\100\023\102\045\103\010\001" +
    "\002\000\062\006\021\012\070\014\011\015\015\017\030" +
    "\022\033\026\063\030\062\034\042\035\053\036\067\041" +
    "\016\043\056\044\024\045\035\046\057\065\043\074\044" +
    "\075\041\076\027\077\036\100\023\102\045\103\010\001" +
    "\002\000\062\006\021\012\070\014\011\015\015\017\030" +
    "\022\033\026\063\030\062\034\042\035\053\036\067\041" +
    "\016\043\056\044\024\045\035\046\057\065\043\074\044" +
    "\075\041\076\027\077\036\100\023\102\045\103\010\001" +
    "\002\000\004\016\107\001\002\000\104\005\uffd9\006\uffd9" +
    "\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\021\uffd9\022" +
    "\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9" +
    "\034\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9\042\uffd9\043" +
    "\uffd9\044\uffd9\045\uffd9\046\uffd9\065\uffd9\074\uffd9\075\uffd9" +
    "\076\uffd9\077\uffd9\100\uffd9\102\uffd9\103\uffd9\001\002\000" +
    "\104\005\uffd8\006\uffd8\012\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\021\uffd8\022\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\034\uffd8\035\uffd8\036\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\065" +
    "\uffd8\074\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\102\uffd8" +
    "\103\uffd8\001\002\000\104\005\uffd5\006\uffd5\012\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\021\uffd5\022\uffd5\025\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\034\uffd5\035" +
    "\uffd5\036\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\046\uffd5\065\uffd5\074\uffd5\075\uffd5\076\uffd5\077" +
    "\uffd5\100\uffd5\102\uffd5\103\uffd5\001\002\000\110\005\uffd4" +
    "\006\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\034\uffd4\035\uffd4\036\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\065\uffd4\074\uffd4\075\uffd4\076\uffd4\077\uffd4\100\uffd4\102" +
    "\uffd4\103\uffd4\001\002\000\110\005\uffd1\006\uffd1\012\uffd1" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1" +
    "\032\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\041\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\065\uffd1\074\uffd1" +
    "\075\uffd1\076\uffd1\077\uffd1\100\uffd1\102\uffd1\103\uffd1\001" +
    "\002\000\064\006\021\012\070\014\011\015\015\017\030" +
    "\022\033\026\063\030\062\034\042\035\053\036\067\037" +
    "\116\041\016\043\056\044\024\045\035\046\057\065\043" +
    "\074\044\075\041\076\027\077\036\100\023\102\045\103" +
    "\010\001\002\000\004\040\127\001\002\000\004\100\117" +
    "\001\002\000\012\043\056\044\024\045\035\046\057\001" +
    "\002\000\062\006\021\012\070\014\011\015\015\017\030" +
    "\022\033\026\063\030\062\034\042\035\053\036\067\041" +
    "\016\043\056\044\024\045\035\046\057\065\043\074\044" +
    "\075\041\076\027\077\036\100\023\102\045\103\010\001" +
    "\002\000\066\006\uffbd\012\uffbd\014\uffbd\015\uffbd\017\uffbd" +
    "\022\uffbd\026\uffbd\030\uffbd\034\uffbd\035\uffbd\036\uffbd\041" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\065\uffbd\066\uffbd" +
    "\070\122\074\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\102" +
    "\uffbd\103\uffbd\001\002\000\004\100\117\001\002\000\064" +
    "\006\uffbe\012\uffbe\014\uffbe\015\uffbe\017\uffbe\022\uffbe\026" +
    "\uffbe\030\uffbe\034\uffbe\035\uffbe\036\uffbe\041\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\046\uffbe\065\uffbe\066\uffbe\074\uffbe\075" +
    "\uffbe\076\uffbe\077\uffbe\100\uffbe\102\uffbe\103\uffbe\001\002" +
    "\000\004\040\125\001\002\000\106\005\uffbf\006\uffbf\012" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\021\uffbf\022\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\040\uffbf\041\uffbf\042\uffbf" +
    "\043\uffbf\044\uffbf\045\uffbf\046\uffbf\065\uffbf\074\uffbf\075" +
    "\uffbf\076\uffbf\077\uffbf\100\uffbf\102\uffbf\103\uffbf\001\002" +
    "\000\066\006\uffbc\012\uffbc\014\uffbc\015\uffbc\017\uffbc\022" +
    "\uffbc\026\uffbc\030\uffbc\034\uffbc\035\uffbc\036\uffbc\041\uffbc" +
    "\043\uffbc\044\uffbc\045\uffbc\046\uffbc\065\uffbc\066\uffbc\070" +
    "\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\100\uffbc\102\uffbc" +
    "\103\uffbc\001\002\000\104\005\uffc0\006\uffc0\012\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0\025\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\045\uffc0\046\uffc0\065\uffc0\074\uffc0\075\uffc0\076\uffc0\077" +
    "\uffc0\100\uffc0\102\uffc0\103\uffc0\001\002\000\104\005\uffb3" +
    "\006\uffb3\012\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\021" +
    "\uffb3\022\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\034\uffb3\035\uffb3\036\uffb3\040\uffb3\041\uffb3\042" +
    "\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\065\uffb3\074\uffb3" +
    "\075\uffb3\076\uffb3\077\uffb3\100\uffb3\102\uffb3\103\uffb3\001" +
    "\002\000\004\100\134\001\002\000\104\005\uffb4\006\uffb4" +
    "\012\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\021\uffb4\022" +
    "\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\034\uffb4\035\uffb4\036\uffb4\040\uffb4\041\uffb4\042\uffb4\043" +
    "\uffb4\044\uffb4\045\uffb4\046\uffb4\065\uffb4\074\uffb4\075\uffb4" +
    "\076\uffb4\077\uffb4\100\uffb4\102\uffb4\103\uffb4\001\002\000" +
    "\104\005\uffc1\006\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\017\uffc1\021\uffc1\022\uffc1\025\uffc1\026\uffc1\027\uffc1\030" +
    "\uffc1\031\uffc1\032\uffc1\034\uffc1\035\uffc1\036\uffc1\040\uffc1" +
    "\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\065" +
    "\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\100\uffc1\102\uffc1" +
    "\103\uffc1\001\002\000\004\065\135\001\002\000\006\066" +
    "\136\100\117\001\002\000\004\067\142\001\002\000\004" +
    "\066\140\001\002\000\004\067\141\001\002\000\104\005" +
    "\uffb0\006\uffb0\012\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0" +
    "\021\uffb0\022\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\034\uffb0\035\uffb0\036\uffb0\040\uffb0\041\uffb0" +
    "\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\065\uffb0\074" +
    "\uffb0\075\uffb0\076\uffb0\077\uffb0\100\uffb0\102\uffb0\103\uffb0" +
    "\001\002\000\104\005\uffb1\006\uffb1\012\uffb1\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\021\uffb1\022\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\065\uffb1\074\uffb1\075\uffb1\076\uffb1\077\uffb1\100" +
    "\uffb1\102\uffb1\103\uffb1\001\002\000\004\020\144\001\002" +
    "\000\062\006\021\012\070\014\011\015\015\017\030\022" +
    "\033\026\063\030\062\034\042\035\053\036\067\041\016" +
    "\043\056\044\024\045\035\046\057\065\043\074\044\075" +
    "\041\076\027\077\036\100\023\102\045\103\010\001\002" +
    "\000\004\027\146\001\002\000\104\005\uffc4\006\uffc4\012" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\021\uffc4\022\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\065\uffc4\074\uffc4\075\uffc4\076" +
    "\uffc4\077\uffc4\100\uffc4\102\uffc4\103\uffc4\001\002\000\004" +
    "\031\150\001\002\000\012\062\101\063\077\064\100\100" +
    "\102\001\002\000\104\005\uffc3\006\uffc3\012\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\021\uffc3\022\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\065\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3" +
    "\100\uffc3\102\uffc3\103\uffc3\001\002\000\104\005\uffba\006" +
    "\uffba\012\uffba\014\uffba\015\uffba\016\uffba\017\uffba\021\uffba" +
    "\022\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032" +
    "\uffba\034\uffba\035\uffba\036\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\065\uffba\074\uffba\075" +
    "\uffba\076\uffba\077\uffba\100\uffba\102\uffba\103\uffba\001\002" +
    "\000\006\065\043\103\010\001\002\000\006\065\043\103" +
    "\010\001\002\000\130\005\uffe8\006\uffe8\012\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\034\uffe8\035\uffe8\036\uffe8\040\uffe8\041\uffe8\042" +
    "\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\065\uffe8\066\uffe8\067\uffe8\073\uffe8\074" +
    "\uffe8\075\uffe8\076\uffe8\077\uffe8\100\uffe8\102\uffe8\103\uffe8" +
    "\001\002\000\130\005\uffe7\006\uffe7\012\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\034\uffe7\035\uffe7\036\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\046\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\054\uffe7\065\uffe7\066\uffe7\067\uffe7\073\uffe7\074\uffe7" +
    "\075\uffe7\076\uffe7\077\uffe7\100\uffe7\102\uffe7\103\uffe7\001" +
    "\002\000\004\067\160\001\002\000\104\005\uffab\006\uffab" +
    "\012\uffab\014\uffab\015\uffab\016\uffab\017\uffab\021\uffab\022" +
    "\uffab\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab" +
    "\034\uffab\035\uffab\036\uffab\040\uffab\041\uffab\042\uffab\043" +
    "\uffab\044\uffab\045\uffab\046\uffab\065\uffab\074\uffab\075\uffab" +
    "\076\uffab\077\uffab\100\uffab\102\uffab\103\uffab\001\002\000" +
    "\006\065\043\103\010\001\002\000\006\065\043\103\010" +
    "\001\002\000\130\005\uffea\006\uffea\012\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\034\uffea\035\uffea\036\uffea\040\uffea\041\uffea\042\uffea" +
    "\043\uffea\044\uffea\045\uffea\046\uffea\051\uffea\052\uffea\053" +
    "\154\054\153\065\uffea\066\uffea\067\uffea\073\uffea\074\uffea" +
    "\075\uffea\076\uffea\077\uffea\100\uffea\102\uffea\103\uffea\001" +
    "\002\000\130\005\uffeb\006\uffeb\012\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\040\uffeb\041\uffeb\042\uffeb\043" +
    "\uffeb\044\uffeb\045\uffeb\046\uffeb\051\uffeb\052\uffeb\053\154" +
    "\054\153\065\uffeb\066\uffeb\067\uffeb\073\uffeb\074\uffeb\075" +
    "\uffeb\076\uffeb\077\uffeb\100\uffeb\102\uffeb\103\uffeb\001\002" +
    "\000\010\051\161\052\162\066\166\001\002\000\130\005" +
    "\uffe5\006\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\046\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\077" +
    "\uffe5\100\uffe5\102\uffe5\103\uffe5\001\002\000\104\005\uffad" +
    "\006\uffad\012\uffad\014\uffad\015\uffad\016\uffad\017\uffad\021" +
    "\uffad\022\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad" +
    "\032\uffad\034\uffad\035\uffad\036\uffad\040\uffad\041\uffad\042" +
    "\uffad\043\uffad\044\uffad\045\uffad\046\uffad\065\uffad\074\uffad" +
    "\075\uffad\076\uffad\077\uffad\100\uffad\102\uffad\103\uffad\001" +
    "\002\000\004\011\171\001\002\000\014\065\043\076\027" +
    "\077\036\102\045\103\010\001\002\000\004\023\173\001" +
    "\002\000\014\065\043\076\027\077\036\102\045\103\010" +
    "\001\002\000\006\020\175\024\177\001\002\000\062\006" +
    "\021\012\070\014\011\015\015\017\030\022\033\026\063" +
    "\030\062\034\042\035\053\036\067\041\016\043\056\044" +
    "\024\045\035\046\057\065\043\074\044\075\041\076\027" +
    "\077\036\100\023\102\045\103\010\001\002\000\004\025" +
    "\uffc8\001\002\000\010\065\043\100\203\103\010\001\002" +
    "\000\004\025\202\001\002\000\004\025\uffc7\001\002\000" +
    "\104\005\uffc9\006\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\021\uffc9\022\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9\036\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\065" +
    "\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\100\uffc9\102\uffc9" +
    "\103\uffc9\001\002\000\004\020\uffca\001\002\000\004\020" +
    "\206\001\002\000\010\020\uffcb\051\161\052\162\001\002" +
    "\000\062\006\021\012\070\014\011\015\015\017\030\022" +
    "\033\026\063\030\062\034\042\035\053\036\067\041\016" +
    "\043\056\044\024\045\035\046\057\065\043\074\044\075" +
    "\041\076\027\077\036\100\023\102\045\103\010\001\002" +
    "\000\004\025\uffc5\001\002\000\004\025\uffc6\001\002\000" +
    "\004\020\212\001\002\000\004\072\213\001\002\000\014" +
    "\065\043\076\027\077\036\102\045\103\010\001\002\000" +
    "\104\005\uffcf\006\uffcf\012\uffcf\014\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\021\uffcf\022\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\034\uffcf\035\uffcf\036\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\065" +
    "\uffcf\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\102\uffcf" +
    "\103\uffcf\001\002\000\004\073\216\001\002\000\004\013" +
    "\217\001\002\000\062\006\021\012\070\014\011\015\015" +
    "\017\030\022\033\026\063\030\062\034\042\035\053\036" +
    "\067\041\016\043\056\044\024\045\035\046\057\065\043" +
    "\074\044\075\041\076\027\077\036\100\023\102\045\103" +
    "\010\001\002\000\104\005\uffcd\006\uffcd\012\uffcd\014\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\025\uffcd\026" +
    "\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\065\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd" +
    "\100\uffcd\102\uffcd\103\uffcd\001\002\000\004\100\023\001" +
    "\002\000\006\007\uffe3\011\uffe3\001\002\000\104\005\uffac" +
    "\006\uffac\012\uffac\014\uffac\015\uffac\016\uffac\017\uffac\021" +
    "\uffac\022\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\032\uffac\034\uffac\035\uffac\036\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\065\uffac\074\uffac" +
    "\075\uffac\076\uffac\077\uffac\100\uffac\102\uffac\103\uffac\001" +
    "\002\000\004\007\225\001\002\000\012\043\056\044\024" +
    "\045\035\046\057\001\002\000\004\010\227\001\002\000" +
    "\014\065\043\076\027\077\036\102\045\103\010\001\002" +
    "\000\104\005\ufff5\006\ufff5\012\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\021\ufff5\022\ufff5\025\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\034\ufff5\035\ufff5\036\ufff5\040" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5" +
    "\065\ufff5\074\ufff5\075\ufff5\076\ufff5\077\ufff5\100\ufff5\102" +
    "\ufff5\103\ufff5\001\002\000\014\065\043\076\027\077\036" +
    "\102\045\103\010\001\002\000\104\005\uffe1\006\uffe1\012" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\021\uffe1\022\uffe1" +
    "\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\045\uffe1\046\uffe1\065\uffe1\074\uffe1\075\uffe1\076" +
    "\uffe1\077\uffe1\100\uffe1\102\uffe1\103\uffe1\001\002\000\004" +
    "\002\000\001\002\000\012\043\056\044\024\045\035\046" +
    "\057\001\002\000\064\006\021\012\070\014\011\015\015" +
    "\017\030\022\033\026\063\030\062\034\042\035\053\036" +
    "\067\037\237\041\016\043\056\044\024\045\035\046\057" +
    "\065\043\074\044\075\041\076\027\077\036\100\023\102" +
    "\045\103\010\001\002\000\006\032\243\042\uffb6\001\002" +
    "\000\004\100\117\001\002\000\062\006\021\012\070\014" +
    "\011\015\015\017\030\022\033\026\063\030\062\034\042" +
    "\035\053\036\067\041\016\043\056\044\024\045\035\046" +
    "\057\065\043\074\044\075\041\076\027\077\036\100\023" +
    "\102\045\103\010\001\002\000\006\032\243\042\uffb6\001" +
    "\002\000\004\042\247\001\002\000\014\065\043\076\027" +
    "\077\036\102\045\103\010\001\002\000\004\042\uffb7\001" +
    "\002\000\004\067\246\001\002\000\004\042\uffb5\001\002" +
    "\000\106\005\uffb8\006\uffb8\012\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\021\uffb8\022\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036" +
    "\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\065\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100" +
    "\uffb8\102\uffb8\103\uffb8\001\002\000\004\042\251\001\002" +
    "\000\104\005\uffb9\006\uffb9\012\uffb9\014\uffb9\015\uffb9\016" +
    "\uffb9\017\uffb9\021\uffb9\022\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\034\uffb9\035\uffb9\036\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9" +
    "\065\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100\uffb9\102" +
    "\uffb9\103\uffb9\001\002\000\004\013\253\001\002\000\062" +
    "\006\021\012\070\014\011\015\015\017\030\022\033\026" +
    "\063\030\062\034\042\035\053\036\067\041\016\043\056" +
    "\044\024\045\035\046\057\065\043\074\044\075\041\076" +
    "\027\077\036\100\023\102\045\103\010\001\002\000\004" +
    "\016\uffd6\001\002\000\062\006\021\012\070\014\011\015" +
    "\015\017\030\022\033\026\063\030\062\034\042\035\053" +
    "\036\067\041\016\043\056\044\024\045\035\046\057\065" +
    "\043\074\044\075\041\076\027\077\036\100\023\102\045" +
    "\103\010\001\002\000\004\021\uffcc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\254\000\004\002\004\001\001\000\076\003\016\004" +
    "\033\005\070\006\072\007\006\010\021\011\013\012\046" +
    "\013\047\014\031\015\051\016\045\017\017\020\054\021" +
    "\063\022\050\023\012\024\011\025\071\030\053\031\073" +
    "\034\036\040\030\041\025\042\065\043\064\046\060\047" +
    "\057\055\024\056\037\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\015\204" +
    "\020\054\021\063\033\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\015\164" +
    "\020\054\021\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\052\151\053\131\054\127\001\001\000" +
    "\002\001\001\000\076\003\146\004\033\005\070\006\072" +
    "\007\006\010\021\011\013\012\046\013\047\014\031\015" +
    "\051\016\045\017\017\020\054\021\063\022\050\023\012" +
    "\024\011\025\071\030\053\031\073\034\036\040\030\041" +
    "\025\042\065\043\064\046\060\047\057\055\024\056\037" +
    "\001\001\000\004\027\142\001\001\000\002\001\001\000" +
    "\010\052\132\053\131\054\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\076\003\103\004\033\005\070\006\072\007\006\010" +
    "\021\011\013\012\046\013\047\014\031\015\051\016\045" +
    "\017\017\020\054\021\063\022\050\023\012\024\011\025" +
    "\071\030\053\031\073\034\036\040\030\041\025\042\065" +
    "\043\064\046\060\047\057\055\024\056\037\001\001\000" +
    "\100\003\110\004\033\005\070\006\072\007\006\010\021" +
    "\011\013\012\046\013\047\014\031\015\051\016\045\017" +
    "\017\020\054\021\063\022\050\023\012\024\011\025\071" +
    "\026\107\030\053\031\073\034\036\040\030\041\025\042" +
    "\065\043\064\046\060\047\057\055\024\056\037\001\001" +
    "\000\076\003\105\004\033\005\070\006\072\007\006\010" +
    "\021\011\013\012\046\013\047\014\031\015\051\016\045" +
    "\017\017\020\054\021\063\022\050\023\012\024\011\025" +
    "\071\030\053\031\073\034\036\040\030\041\025\042\065" +
    "\043\064\046\060\047\057\055\024\056\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\076\003" +
    "\114\004\033\005\070\006\072\007\006\010\021\011\013" +
    "\012\046\013\047\014\031\015\051\016\045\017\017\020" +
    "\054\021\063\022\050\023\012\024\011\025\071\030\053" +
    "\031\073\034\036\040\030\041\025\042\065\043\064\046" +
    "\060\047\057\055\024\056\037\001\001\000\002\001\001" +
    "\000\006\044\120\045\117\001\001\000\004\007\125\001" +
    "\001\000\076\003\123\004\033\005\070\006\072\007\006" +
    "\010\021\011\013\012\046\013\047\014\031\015\051\016" +
    "\045\017\017\020\054\021\063\022\050\023\012\024\011" +
    "\025\071\030\053\031\073\034\036\040\030\041\025\042" +
    "\065\043\064\046\060\047\057\055\024\056\037\001\001" +
    "\000\002\001\001\000\006\044\120\045\122\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\120\045\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\076\003\144\004\033\005" +
    "\070\006\072\007\006\010\021\011\013\012\046\013\047" +
    "\014\031\015\051\016\045\017\017\020\054\021\063\022" +
    "\050\023\012\024\011\025\071\030\053\031\073\034\036" +
    "\040\030\041\025\042\065\043\064\046\060\047\057\055" +
    "\024\056\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\155\001\001\000\004" +
    "\021\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\163\021\063" +
    "\001\001\000\006\020\162\021\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\010\171\015" +
    "\051\016\045\020\054\021\063\001\001\000\002\001\001" +
    "\000\014\010\173\015\051\016\045\020\054\021\063\001" +
    "\001\000\010\035\175\036\200\037\177\001\001\000\076" +
    "\003\207\004\033\005\070\006\072\007\006\010\021\011" +
    "\013\012\046\013\047\014\031\015\051\016\045\017\017" +
    "\020\054\021\063\022\050\023\012\024\011\025\071\030" +
    "\053\031\073\034\036\040\030\041\025\042\065\043\064" +
    "\046\060\047\057\055\024\056\037\001\001\000\002\001" +
    "\001\000\012\015\204\020\054\021\063\033\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\076" +
    "\003\206\004\033\005\070\006\072\007\006\010\021\011" +
    "\013\012\046\013\047\014\031\015\051\016\045\017\017" +
    "\020\054\021\063\022\050\023\012\024\011\025\071\030" +
    "\053\031\073\034\036\040\030\041\025\042\065\043\064" +
    "\046\060\047\057\055\024\056\037\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\213" +
    "\001\001\000\014\010\214\015\051\016\045\020\054\021" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\003\217\004\033\005\070\006\072\007" +
    "\006\010\021\011\013\012\046\013\047\014\031\015\051" +
    "\016\045\017\017\020\054\021\063\022\050\023\012\024" +
    "\011\025\071\030\053\031\073\034\036\040\030\041\025" +
    "\042\065\043\064\046\060\047\057\055\024\056\037\001" +
    "\001\000\002\001\001\000\004\017\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\225\001\001\000\002\001\001\000\014\010\227\015\051" +
    "\016\045\020\054\021\063\001\001\000\002\001\001\000" +
    "\014\010\231\015\051\016\045\020\054\021\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\234\001" +
    "\001\000\076\003\235\004\033\005\070\006\072\007\006" +
    "\010\021\011\013\012\046\013\047\014\031\015\051\016" +
    "\045\017\017\020\054\021\063\022\050\023\012\024\011" +
    "\025\071\030\053\031\073\034\036\040\030\041\025\042" +
    "\065\043\064\046\060\047\057\055\024\056\037\001\001" +
    "\000\006\050\247\051\243\001\001\000\006\044\120\045" +
    "\237\001\001\000\076\003\240\004\033\005\070\006\072" +
    "\007\006\010\021\011\013\012\046\013\047\014\031\015" +
    "\051\016\045\017\017\020\054\021\063\022\050\023\012" +
    "\024\011\025\071\030\053\031\073\034\036\040\030\041" +
    "\025\042\065\043\064\046\060\047\057\055\024\056\037" +
    "\001\001\000\006\050\241\051\243\001\001\000\002\001" +
    "\001\000\014\010\244\015\051\016\045\020\054\021\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\076\003\253\004\033\005\070\006" +
    "\072\007\006\010\021\011\013\012\046\013\047\014\031" +
    "\015\051\016\045\017\017\020\054\021\063\022\050\023" +
    "\012\024\011\025\071\030\053\031\073\034\036\040\030" +
    "\041\025\042\065\043\064\046\060\047\057\055\024\056" +
    "\037\001\001\000\002\001\001\000\076\003\255\004\033" +
    "\005\070\006\072\007\006\010\021\011\013\012\046\013" +
    "\047\014\031\015\051\016\045\017\017\020\054\021\063" +
    "\022\050\023\012\024\011\025\071\030\053\031\073\034" +
    "\036\040\030\041\025\042\065\043\064\046\060\047\057" +
    "\055\024\056\037\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {
  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codigo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codigo ::= PR_INICIO instrucciones PR_FIN 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= comentarios 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= tipo_dato 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= ciclos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= metodo 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= impresion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comentarios ::= COMENTARIO1 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comentarios ::= COMENTARIO2 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= PR_INGRESAR lista_variables PR_COMO tipo_dato PR_CON_VALOR expresiones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipo_dato ::= PR_NUMERO 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipo_dato ::= PR_CADENA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_dato ::= PR_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_dato ::= PR_CARACTER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expresiones ::= operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= CADENA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operacion ::= operacion OP_SUMA termino 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operacion ::= operacion OP_RESTA termino 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacion ::= termino 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // termino ::= termino OP_MULTIPLICACION factor 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("termino",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // termino ::= termino OP_DIVISION factor 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("termino",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("termino",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // factor ::= SB_PARENTESIS_LEFT operacion SB_PARENTESIS_RIGHT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // factor ::= DIGITOS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("factor",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // lista_variables ::= IDENTIFICADOR SB_COMA lista_variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // lista_variables ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // asignacion ::= lista_variables PR_ASIGNACION expresiones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ciclos ::= if 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ciclos ::= segun 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ciclos ::= para 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ciclos ::= mientras 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ciclos ::= repetir 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ciclos",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // if ::= if1 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("if",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // if ::= if2 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("if",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // if1 ::= PR_SI condicion PR_ENTONCES instrucciones PR_FIN_SI 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("if1",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // if2 ::= PR_SI condicion instrucciones delo_contrario 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("if2",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // if2 ::= o_si PR_FIN_SI 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("if2",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // o_si ::= PR_O_SI condicion PR_ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("o_si",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // delo_contrario ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("delo_contrario",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // condicion ::= IDENTIFICADOR OP_IGUAL 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // condicion ::= OP_ES_DIFERENTE 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // condicion ::= OP_MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // condicion ::= OP_MENOR_IGUAL condicion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // condicion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("condicion",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // segun ::= PR_SEGUN valor PR_HACER caso 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("segun",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // segun ::= segun_contrario PR_FIN_SEGUN 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("segun",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // caso ::= SB_INTERROGACION_LEFT expresiones SB_INTERROGACION_RIGHT PR_ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("caso",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // segun_contrario ::= PR_DE_LO_CONTRARIO PR_ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("segun_contrario",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // valor ::= operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("valor",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("valor",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // para ::= PR_PARA IDENTIFICADOR PR_ASIGNACION expresiones PR_HASTA expresiones h_c PR_FIN_PARA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("para",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // h_c ::= hacer 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("h_c",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // h_c ::= con_incremental 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("h_c",29, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // hacer ::= PR_HACER instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("hacer",27, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // con_incremental ::= PR_CON_INCREMENTAL valor PR_HACER instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("con_incremental",28, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // mientras ::= PR_MIENTRAS condicion PR_HACER instrucciones PR_FIN_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("mientras",30, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // repetir ::= PR_REPETIR instrucciones PR_HASTA_QUE condicion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("repetir",31, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // metodo ::= metodo1 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // metodo ::= metodo2 ejecutar 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("metodo",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // metodo1 ::= PR_METODO IDENTIFICADOR instrucciones PR_FIN_METODO 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("metodo1",32, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // metodo2 ::= PR_METODO IDENTIFICADOR PR_CON_PARAMETROS lista_parametros instrucciones PR_FIN_METODO 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("metodo2",33, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // lista_parametros ::= parametro SB_COMA lista_parametros 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // lista_parametros ::= parametro 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_parametros",35, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // parametro ::= IDENTIFICADOR tipo_dato 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",34, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // funcion ::= funcion1 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // funcion ::= funcion2 ejecutar 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // funcion1 ::= PR_FUNCION IDENTIFICADOR tipo_dato instrucciones retornar PR_FIN_FUNCION 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("funcion1",36, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // funcion2 ::= PR_FUNCION IDENTIFICADOR tipo_dato PR_CON_PARAMETROS lista_parametros instrucciones retornar PR_FIN_FUNCION 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("funcion2",37, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // retornar ::= retornar_valor 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("retornar",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // retornar ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("retornar",38, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // retornar_valor ::= PR_RETORNAR expresiones SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("retornar_valor",39, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ejecutar ::= ejecutar_sinP 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ejecutar",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ejecutar ::= ejecutar_conP 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ejecutar",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ejecutar ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ejecutar",40, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ejecutar_sinP ::= PR_EJECUTAR IDENTIFICADOR SB_PARENTESIS_LEFT SB_PARENTESIS_RIGHT SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ejecutar_sinP",41, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ejecutar_conP ::= PR_EJECUTAR IDENTIFICADOR SB_PARENTESIS_LEFT lista_parametros SB_PARENTESIS_RIGHT SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ejecutar_conP",42, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // impresion ::= imprimir_sS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("impresion",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // impresion ::= imprimir_cS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("impresion",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // imprimir_sS ::= PR_IMPRIMIR IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir_sS",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // imprimir_sS ::= expresiones SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir_sS",43, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // imprimir_cS ::= PR_IMPRIMIR_NL CADENA SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("imprimir_cS",44, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
