
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\004\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\010\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\003\000\002\007\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\011\005" +
    "\000\002\011\005\000\002\011\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\003\000\002\015\005\000\002" +
    "\015\003\000\002\013\005\000\002\013\003\000\002\010" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\004\004\004\001\002\000\022\006\020\043" +
    "\023\044\015\045\021\046\017\074\011\075\010\100\024" +
    "\001\002\000\004\002\006\001\002\000\004\002\001\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\ufffa\001\002" +
    "\000\004\002\ufffb\001\002\000\004\002\000\001\002\000" +
    "\004\002\ufffc\001\002\000\004\011\057\001\002\000\006" +
    "\002\ufff7\010\ufff7\001\002\000\004\002\ufffe\001\002\000" +
    "\006\002\ufff5\010\ufff5\001\002\000\004\100\024\001\002" +
    "\000\006\002\ufff6\010\ufff6\001\002\000\004\002\ufffd\001" +
    "\002\000\006\002\ufff8\010\ufff8\001\002\000\010\007\uffe6" +
    "\011\uffe6\070\025\001\002\000\004\100\024\001\002\000" +
    "\006\007\uffe7\011\uffe7\001\002\000\004\007\030\001\002" +
    "\000\012\043\023\044\015\045\021\046\017\001\002\000" +
    "\004\010\032\001\002\000\014\065\034\076\044\077\037" +
    "\102\033\103\035\001\002\000\004\002\ufff2\001\002\000" +
    "\006\065\034\103\035\001\002\000\016\002\uffe8\051\uffe8" +
    "\052\uffe8\053\uffe8\054\uffe8\066\uffe8\001\002\000\016\002" +
    "\uffed\051\uffed\052\uffed\053\051\054\050\066\uffed\001\002" +
    "\000\004\002\ufff1\001\002\000\004\002\ufff4\001\002\000" +
    "\016\002\uffea\051\uffea\052\uffea\053\uffea\054\uffea\066\uffea" +
    "\001\002\000\004\002\ufff9\001\002\000\010\002\ufff3\051" +
    "\046\052\045\001\002\000\004\002\ufff0\001\002\000\006" +
    "\065\034\103\035\001\002\000\006\065\034\103\035\001" +
    "\002\000\016\002\uffef\051\uffef\052\uffef\053\051\054\050" +
    "\066\uffef\001\002\000\006\065\034\103\035\001\002\000" +
    "\006\065\034\103\035\001\002\000\016\002\uffec\051\uffec" +
    "\052\uffec\053\uffec\054\uffec\066\uffec\001\002\000\016\002" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\066\uffeb\001\002" +
    "\000\016\002\uffee\051\uffee\052\uffee\053\051\054\050\066" +
    "\uffee\001\002\000\010\051\046\052\045\066\056\001\002" +
    "\000\016\002\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\066" +
    "\uffe9\001\002\000\014\065\034\076\044\077\037\102\033" +
    "\103\035\001\002\000\004\002\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\004\002\004\001\001\000\016\003\011\004" +
    "\006\005\015\006\021\010\012\013\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\030\001\001\000\002\001\001\000\014\007" +
    "\041\011\042\012\037\014\035\015\040\001\001\000\002" +
    "\001\001\000\010\011\054\014\035\015\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\053\015\040\001\001" +
    "\000\006\014\046\015\040\001\001\000\002\001\001\000" +
    "\004\015\052\001\001\000\004\015\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\057\011\042\012\037" +
    "\014\035\015\040\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {
  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codigo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codigo ::= PR_INICIO instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= comentarios 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= tipo_dato 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= asignacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // comentarios ::= COMENTARIO1 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // comentarios ::= COMENTARIO2 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("comentarios",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= PR_INGRESAR lista_variables PR_COMO tipo_dato PR_CON_VALOR expresiones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tipo_dato ::= PR_NUMERO 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo_dato ::= PR_CADENA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo_dato ::= PR_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo_dato ::= PR_CARACTER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresiones ::= expresion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresiones ::= operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expresion ::= CADENA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expresion ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expresion ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operacion ::= operacion OP_SUMA termino 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacion ::= operacion OP_RESTA termino 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacion ::= termino 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // termino ::= termino OP_MULTIPLICACION factor 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // termino ::= termino OP_DIVISION factor 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("termino",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // factor ::= SB_PARENTESIS_LEFT operacion SB_PARENTESIS_RIGHT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // factor ::= DIGITOS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lista_variables ::= IDENTIFICADOR SB_COMA lista_variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // lista_variables ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignacion ::= lista_variables PR_ASIGNACION expresiones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
