
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import Error_.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador_Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Analizador_Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Analizador_Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador_Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\012\011\000\002\011\005\000\002\011\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\007\000\002" +
    "\005\005\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\013\006\000\002\015\005" +
    "\000\002\016\006\000\002\016\002\000\002\017\007\000" +
    "\002\017\003\000\002\020\004\000\002\020\002\000\002" +
    "\021\005\000\002\022\006\000\002\022\002\000\002\023" +
    "\003\000\002\023\002\000\002\024\006\000\002\025\005" +
    "\000\002\026\010\000\002\031\003\000\002\031\003\000" +
    "\002\027\004\000\002\030\007\000\002\032\003\000\002" +
    "\032\003\000\002\033\005\000\002\034\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\004\004\001\002\000\024\003\027\006" +
    "\022\012\032\022\016\027\015\031\020\035\014\036\026" +
    "\104\030\001\002\000\004\002\006\001\002\000\004\002" +
    "\001\001\002\000\004\005\204\001\002\000\042\003\uffc1" +
    "\005\uffc1\006\uffc1\012\uffc1\014\uffc1\015\uffc1\016\uffc1\022" +
    "\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\035\uffc1" +
    "\036\uffc1\104\uffc1\001\002\000\042\003\ufff8\005\ufff8\006" +
    "\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\022\ufff8\026\ufff8" +
    "\027\ufff8\030\ufff8\031\ufff8\032\ufff8\035\ufff8\036\ufff8\104" +
    "\ufff8\001\002\000\042\003\uffc2\005\uffc2\006\uffc2\012\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\022\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\031\uffc2\032\uffc2\035\uffc2\036\uffc2\104\uffc2\001\002" +
    "\000\042\003\ufff9\005\ufff9\006\ufff9\012\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\022\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\035\ufff9\036\ufff9\104\ufff9\001\002\000\016\071" +
    "\036\102\045\103\040\104\046\106\034\107\037\001\002" +
    "\000\022\030\uffcc\052\173\071\uffca\102\uffca\103\uffca\104" +
    "\uffca\106\uffca\107\uffca\001\002\000\004\104\030\001\002" +
    "\000\026\003\027\005\ufffe\006\022\012\032\022\016\027" +
    "\015\031\020\035\014\036\026\104\030\001\002\000\024" +
    "\003\027\006\022\012\032\022\016\027\015\031\020\035" +
    "\014\036\026\104\030\001\002\000\042\003\ufffc\005\ufffc" +
    "\006\ufffc\012\ufffc\014\ufffc\015\ufffc\016\ufffc\022\ufffc\026" +
    "\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\035\ufffc\036\ufffc" +
    "\104\ufffc\001\002\000\004\104\030\001\002\000\042\003" +
    "\ufffd\005\ufffd\006\ufffd\012\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\022\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\035" +
    "\ufffd\036\ufffd\104\ufffd\001\002\000\042\003\ufffa\005\ufffa" +
    "\006\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\022\ufffa\026" +
    "\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\035\ufffa\036\ufffa" +
    "\104\ufffa\001\002\000\004\011\131\001\002\000\016\071" +
    "\036\102\045\103\040\104\046\106\034\107\037\001\002" +
    "\000\042\003\ufff6\005\ufff6\006\ufff6\012\ufff6\014\ufff6\015" +
    "\ufff6\016\ufff6\022\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\035\ufff6\036\ufff6\104\ufff6\001\002\000\010\007" +
    "\ufff3\011\ufff3\074\125\001\002\000\042\003\ufff7\005\ufff7" +
    "\006\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\022\ufff7\026" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\035\ufff7\036\ufff7" +
    "\104\ufff7\001\002\000\020\016\uffd3\071\036\102\045\103" +
    "\040\104\046\106\034\107\037\001\002\000\042\003\ufffb" +
    "\005\ufffb\006\ufffb\012\ufffb\014\ufffb\015\ufffb\016\ufffb\022" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\035\ufffb" +
    "\036\ufffb\104\ufffb\001\002\000\116\003\uffe3\005\uffe3\006" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\035\uffe3\036\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061" +
    "\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3\070\uffe3" +
    "\072\uffe3\073\uffe3\104\uffe3\001\002\000\116\003\uffe6\005" +
    "\uffe6\006\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\020\uffe6\022\uffe6\023\uffe6\024\uffe6\026\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\035\uffe6\036\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060" +
    "\uffe6\061\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6" +
    "\070\uffe6\072\uffe6\073\uffe6\104\uffe6\001\002\000\016\071" +
    "\036\102\045\103\040\104\046\106\034\107\037\001\002" +
    "\000\116\003\uffe4\005\uffe4\006\uffe4\012\uffe4\013\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\035\uffe4\036" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\064" +
    "\uffe4\065\uffe4\066\uffe4\070\uffe4\072\uffe4\073\uffe4\104\uffe4" +
    "\001\002\000\116\003\uffe2\005\uffe2\006\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\022\uffe2\023\uffe2" +
    "\024\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\035" +
    "\uffe2\036\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2\054\uffe2" +
    "\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063" +
    "\uffe2\064\uffe2\065\uffe2\066\uffe2\070\uffe2\072\uffe2\073\uffe2" +
    "\104\uffe2\001\002\000\004\016\122\001\002\000\116\003" +
    "\uffe7\005\uffe7\006\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7" +
    "\016\uffe7\020\uffe7\022\uffe7\023\uffe7\024\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\035\uffe7\036\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\057" +
    "\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7" +
    "\066\uffe7\070\uffe7\072\uffe7\073\uffe7\104\uffe7\001\002\000" +
    "\042\013\050\050\062\051\066\052\057\053\055\054\053" +
    "\055\054\056\051\057\060\060\065\061\052\062\061\063" +
    "\047\064\056\065\064\066\063\001\002\000\116\003\uffe5" +
    "\005\uffe5\006\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\020\uffe5\022\uffe5\023\uffe5\024\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\035\uffe5\036\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5" +
    "\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5\066" +
    "\uffe5\070\uffe5\072\uffe5\073\uffe5\104\uffe5\001\002\000\116" +
    "\003\uffe1\005\uffe1\006\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\032\uffe1\035\uffe1\036\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065" +
    "\uffe1\066\uffe1\070\uffe1\072\uffe1\073\uffe1\104\uffe1\001\002" +
    "\000\116\003\uffe0\005\uffe0\006\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\035\uffe0\036" +
    "\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064" +
    "\uffe0\065\uffe0\066\uffe0\070\uffe0\072\uffe0\073\uffe0\104\uffe0" +
    "\001\002\000\016\071\036\102\045\103\040\104\046\106" +
    "\034\107\037\001\002\000\024\003\027\006\022\012\032" +
    "\022\016\027\015\031\020\035\014\036\026\104\030\001" +
    "\002\000\016\071\036\102\045\103\040\104\046\106\034" +
    "\107\037\001\002\000\016\071\036\102\045\103\040\104" +
    "\046\106\034\107\037\001\002\000\016\071\036\102\045" +
    "\103\040\104\046\106\034\107\037\001\002\000\016\071" +
    "\036\102\045\103\040\104\046\106\034\107\037\001\002" +
    "\000\016\071\036\102\045\103\040\104\046\106\034\107" +
    "\037\001\002\000\016\071\036\102\045\103\040\104\046" +
    "\106\034\107\037\001\002\000\016\071\036\102\045\103" +
    "\040\104\046\106\034\107\037\001\002\000\004\067\075" +
    "\001\002\000\016\071\036\102\045\103\040\104\046\106" +
    "\034\107\037\001\002\000\016\071\036\102\045\103\040" +
    "\104\046\106\034\107\037\001\002\000\016\071\036\102" +
    "\045\103\040\104\046\106\034\107\037\001\002\000\016" +
    "\071\036\102\045\103\040\104\046\106\034\107\037\001" +
    "\002\000\016\071\036\102\045\103\040\104\046\106\034" +
    "\107\037\001\002\000\016\071\036\102\045\103\040\104" +
    "\046\106\034\107\037\001\002\000\116\003\uffdf\005\uffdf" +
    "\006\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\020" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\035\uffdf\036\uffdf\050\062\051\uffdf\052" +
    "\057\053\055\054\053\055\054\056\051\057\060\060\065" +
    "\061\052\062\061\063\047\064\056\065\064\066\063\070" +
    "\uffdf\072\uffdf\073\uffdf\104\uffdf\001\002\000\116\003\uffea" +
    "\005\uffea\006\uffea\012\uffea\013\uffea\014\uffea\015\uffea\016" +
    "\uffea\020\uffea\022\uffea\023\uffea\024\uffea\026\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\035\uffea\036\uffea\050\uffea\051" +
    "\uffea\052\057\053\uffea\054\uffea\055\054\056\051\057\060" +
    "\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea\066" +
    "\uffea\070\uffea\072\uffea\073\uffea\104\uffea\001\002\000\106" +
    "\003\uffd8\005\uffd8\006\uffd8\012\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\016\uffd8\020\uffd8\022\uffd8\023\uffd8\024\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\035\uffd8\036\uffd8\050" +
    "\uffd8\051\uffd8\052\057\053\055\054\053\055\054\056\051" +
    "\057\060\060\065\063\uffd8\064\uffd8\070\uffd8\072\uffd8\073" +
    "\uffd8\104\uffd8\001\002\000\106\003\uffd7\005\uffd7\006\uffd7" +
    "\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\020\uffd7\022" +
    "\uffd7\023\uffd7\024\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7" +
    "\032\uffd7\035\uffd7\036\uffd7\050\uffd7\051\uffd7\052\057\053" +
    "\055\054\053\055\054\056\051\057\060\060\065\063\uffd7" +
    "\064\uffd7\070\uffd7\072\uffd7\073\uffd7\104\uffd7\001\002\000" +
    "\116\003\uffde\005\uffde\006\uffde\012\uffde\013\uffde\014\uffde" +
    "\015\uffde\016\uffde\020\uffde\022\uffde\023\uffde\024\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\035\uffde\036\uffde" +
    "\050\uffde\051\uffde\052\057\053\055\054\053\055\054\056" +
    "\051\057\060\060\065\061\052\062\061\063\047\064\056" +
    "\065\064\066\063\070\uffde\072\uffde\073\uffde\104\uffde\001" +
    "\002\000\106\003\uffd9\005\uffd9\006\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\016\uffd9\020\uffd9\022\uffd9\023\uffd9\024" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\035\uffd9" +
    "\036\uffd9\050\uffd9\051\uffd9\052\057\053\055\054\053\055" +
    "\054\056\051\057\060\060\065\063\uffd9\064\uffd9\070\uffd9" +
    "\072\uffd9\073\uffd9\104\uffd9\001\002\000\016\071\036\102" +
    "\045\103\040\104\046\106\034\107\037\001\002\000\042" +
    "\050\062\051\066\052\057\053\055\054\053\055\054\056" +
    "\051\057\060\060\065\061\052\062\061\063\047\064\056" +
    "\065\064\066\063\070\077\001\002\000\116\003\uffe9\005" +
    "\uffe9\006\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\020\uffe9\022\uffe9\023\uffe9\024\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\035\uffe9\036\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9\060" +
    "\uffe9\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9" +
    "\070\uffe9\072\uffe9\073\uffe9\104\uffe9\001\002\000\116\003" +
    "\uffdd\005\uffdd\006\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\035\uffdd\036\uffdd\050\uffdd" +
    "\051\uffdd\052\057\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd" +
    "\066\uffdd\070\uffdd\072\uffdd\073\uffdd\104\uffdd\001\002\000" +
    "\112\003\uffdb\005\uffdb\006\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\016\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\035\uffdb\036\uffdb" +
    "\050\uffdb\051\uffdb\052\057\053\055\054\053\055\054\056" +
    "\051\057\060\060\065\061\052\062\061\065\064\066\063" +
    "\070\uffdb\072\uffdb\073\uffdb\104\uffdb\001\002\000\116\003" +
    "\uffee\005\uffee\006\uffee\012\uffee\013\uffee\014\uffee\015\uffee" +
    "\016\uffee\020\uffee\022\uffee\023\uffee\024\uffee\026\uffee\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\035\uffee\036\uffee\050\uffee" +
    "\051\uffee\052\057\053\uffee\054\uffee\055\054\056\051\057" +
    "\060\060\065\061\uffee\062\uffee\063\uffee\064\uffee\065\uffee" +
    "\066\uffee\070\uffee\072\uffee\073\uffee\104\uffee\001\002\000" +
    "\116\003\uffec\005\uffec\006\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\020\uffec\022\uffec\023\uffec\024\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\035\uffec\036\uffec" +
    "\050\uffec\051\uffec\052\057\053\uffec\054\uffec\055\uffec\056" +
    "\uffec\057\060\060\uffec\061\uffec\062\uffec\063\uffec\064\uffec" +
    "\065\uffec\066\uffec\070\uffec\072\uffec\073\uffec\104\uffec\001" +
    "\002\000\116\003\uffed\005\uffed\006\uffed\012\uffed\013\uffed" +
    "\014\uffed\015\uffed\016\uffed\020\uffed\022\uffed\023\uffed\024" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\035\uffed" +
    "\036\uffed\050\uffed\051\uffed\052\057\053\uffed\054\uffed\055" +
    "\054\056\051\057\060\060\065\061\uffed\062\uffed\063\uffed" +
    "\064\uffed\065\uffed\066\uffed\070\uffed\072\uffed\073\uffed\104" +
    "\uffed\001\002\000\106\003\uffda\005\uffda\006\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\020\uffda\022\uffda\023" +
    "\uffda\024\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda" +
    "\035\uffda\036\uffda\050\uffda\051\uffda\052\057\053\055\054" +
    "\053\055\054\056\051\057\060\060\065\063\uffda\064\uffda" +
    "\070\uffda\072\uffda\073\uffda\104\uffda\001\002\000\116\003" +
    "\uffeb\005\uffeb\006\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\020\uffeb\022\uffeb\023\uffeb\024\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\035\uffeb\036\uffeb\050\uffeb" +
    "\051\uffeb\052\057\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057" +
    "\060\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\066\uffeb\070\uffeb\072\uffeb\073\uffeb\104\uffeb\001\002\000" +
    "\010\014\110\015\111\016\uffcf\001\002\000\024\003\027" +
    "\006\022\012\032\022\016\027\015\031\020\035\014\036" +
    "\026\104\030\001\002\000\016\071\036\102\045\103\040" +
    "\104\046\106\034\107\037\001\002\000\004\016\uffd4\001" +
    "\002\000\004\016\uffd1\001\002\000\042\013\115\050\062" +
    "\051\066\052\057\053\055\054\053\055\054\056\051\057" +
    "\060\060\065\061\052\062\061\063\047\064\056\065\064" +
    "\066\063\001\002\000\024\003\027\006\022\012\032\022" +
    "\016\027\015\031\020\035\014\036\026\104\030\001\002" +
    "\000\010\014\110\015\111\016\uffcf\001\002\000\004\016" +
    "\uffd2\001\002\000\004\016\uffd0\001\002\000\112\003\uffdc" +
    "\005\uffdc\006\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\035\uffdc\036\uffdc\050\uffdc\051" +
    "\uffdc\052\057\053\055\054\053\055\054\056\051\057\060" +
    "\060\065\061\052\062\061\065\064\066\063\070\uffdc\072" +
    "\uffdc\073\uffdc\104\uffdc\001\002\000\042\003\uffd5\005\uffd5" +
    "\006\uffd5\012\uffd5\014\uffd5\015\uffd5\016\uffd5\022\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\035\uffd5\036\uffd5" +
    "\104\uffd5\001\002\000\042\050\062\051\066\052\057\053" +
    "\055\054\053\055\054\056\051\057\060\060\065\061\052" +
    "\062\061\063\047\064\056\065\064\066\063\072\124\001" +
    "\002\000\116\003\uffe8\005\uffe8\006\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\020\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\035\uffe8" +
    "\036\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\070\uffe8\072\uffe8\073\uffe8\104" +
    "\uffe8\001\002\000\004\104\030\001\002\000\006\007\ufff4" +
    "\011\ufff4\001\002\000\042\050\062\051\066\052\057\053" +
    "\055\054\053\055\054\056\051\057\060\060\065\061\052" +
    "\062\061\063\047\064\056\065\064\066\063\073\130\001" +
    "\002\000\042\003\uffbf\005\uffbf\006\uffbf\012\uffbf\014\uffbf" +
    "\015\uffbf\016\uffbf\022\uffbf\026\uffbf\027\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\035\uffbf\036\uffbf\104\uffbf\001\002\000\016" +
    "\071\036\102\045\103\040\104\046\106\034\107\037\001" +
    "\002\000\042\050\062\051\066\052\057\053\055\054\053" +
    "\055\054\056\051\057\060\060\065\061\052\062\061\063" +
    "\047\064\056\065\064\066\063\073\133\001\002\000\042" +
    "\003\uffd6\005\uffd6\006\uffd6\012\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\022\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6" +
    "\035\uffd6\036\uffd6\104\uffd6\001\002\000\004\007\135\001" +
    "\002\000\012\044\141\045\142\046\140\047\136\001\002" +
    "\000\004\010\uffef\001\002\000\004\010\143\001\002\000" +
    "\004\010\ufff0\001\002\000\004\010\ufff2\001\002\000\004" +
    "\010\ufff1\001\002\000\016\071\036\102\045\103\040\104" +
    "\046\106\034\107\037\001\002\000\042\050\062\051\066" +
    "\052\057\053\055\054\053\055\054\056\051\057\060\060" +
    "\065\061\052\062\061\063\047\064\056\065\064\066\063" +
    "\073\145\001\002\000\042\003\ufff5\005\ufff5\006\ufff5\012" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\022\ufff5\026\ufff5\027\ufff5" +
    "\030\ufff5\031\ufff5\032\ufff5\035\ufff5\036\ufff5\104\ufff5\001" +
    "\002\000\004\032\147\001\002\000\016\071\036\102\045" +
    "\103\040\104\046\106\034\107\037\001\002\000\100\003" +
    "\uffc9\005\uffc9\006\uffc9\012\uffc9\014\uffc9\015\uffc9\016\uffc9" +
    "\022\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\035" +
    "\uffc9\036\uffc9\050\062\051\066\052\057\053\055\054\053" +
    "\055\054\056\051\057\060\060\065\061\052\062\061\063" +
    "\047\064\056\065\064\066\063\104\uffc9\001\002\000\004" +
    "\005\uffff\001\002\000\004\026\172\001\002\000\004\011" +
    "\154\001\002\000\016\071\036\102\045\103\040\104\046" +
    "\106\034\107\037\001\002\000\042\023\156\050\062\051" +
    "\066\052\057\053\055\054\053\055\054\056\051\057\060" +
    "\060\065\061\052\062\061\063\047\064\056\065\064\066" +
    "\063\001\002\000\016\071\036\102\045\103\040\104\046" +
    "\106\034\107\037\001\002\000\044\020\162\024\164\050" +
    "\062\051\066\052\057\053\055\054\053\055\054\056\051" +
    "\057\060\060\065\061\052\062\061\063\047\064\056\065" +
    "\064\066\063\001\002\000\004\026\uffc5\001\002\000\004" +
    "\026\uffc6\001\002\000\024\003\027\006\022\012\032\022" +
    "\016\027\015\031\020\035\014\036\026\104\030\001\002" +
    "\000\004\026\uffc7\001\002\000\004\025\165\001\002\000" +
    "\004\107\166\001\002\000\004\020\167\001\002\000\024" +
    "\003\027\006\022\012\032\022\016\027\015\031\020\035" +
    "\014\036\026\104\030\001\002\000\004\026\uffc3\001\002" +
    "\000\004\026\uffc4\001\002\000\042\003\uffc8\005\uffc8\006" +
    "\uffc8\012\uffc8\014\uffc8\015\uffc8\016\uffc8\022\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\031\uffc8\032\uffc8\035\uffc8\036\uffc8\104" +
    "\uffc8\001\002\000\016\071\uffcb\102\uffcb\103\uffcb\104\uffcb" +
    "\106\uffcb\107\uffcb\001\002\000\016\071\036\102\045\103" +
    "\040\104\046\106\034\107\037\001\002\000\004\030\176" +
    "\001\002\000\042\003\uffce\005\uffce\006\uffce\012\uffce\014" +
    "\uffce\015\uffce\016\uffce\022\uffce\026\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\035\uffce\036\uffce\104\uffce\001\002\000" +
    "\042\020\200\050\062\051\066\052\057\053\055\054\053" +
    "\055\054\056\051\057\060\060\065\061\052\062\061\063" +
    "\047\064\056\065\064\066\063\001\002\000\024\003\027" +
    "\006\022\012\032\022\016\027\015\031\020\035\014\036" +
    "\026\104\030\001\002\000\004\030\uffcd\001\002\000\042" +
    "\050\062\051\066\052\057\053\055\054\053\055\054\056" +
    "\051\057\060\060\065\061\052\062\061\063\047\064\056" +
    "\065\064\066\063\073\203\001\002\000\042\003\uffc0\005" +
    "\uffc0\006\uffc0\012\uffc0\014\uffc0\015\uffc0\016\uffc0\022\uffc0" +
    "\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\035\uffc0\036" +
    "\uffc0\104\uffc0\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\004\002\004\001\001\000\032\003\006\004" +
    "\016\011\024\012\022\013\020\015\032\021\023\024\012" +
    "\025\010\032\030\033\011\034\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\201\006\043\007\041\010\034\001\001\000\006" +
    "\022\174\023\173\001\001\000\006\011\152\026\151\001" +
    "\001\000\032\003\150\004\016\011\024\012\022\013\020" +
    "\015\032\021\023\024\012\025\010\032\030\033\011\034" +
    "\007\001\001\000\030\004\145\011\024\012\022\013\020" +
    "\015\032\021\023\024\012\025\010\032\030\033\011\034" +
    "\007\001\001\000\002\001\001\000\004\011\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\126\006\043\007\041\010\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\042\006\043\007\041\010\034\016\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\122\006\043\007\041\010\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\120\006\043\007\041\010\034\001" +
    "\001\000\030\004\106\011\024\012\022\013\020\015\032" +
    "\021\023\024\012\025\010\032\030\033\011\034\007\001" +
    "\001\000\012\005\105\006\043\007\041\010\034\001\001" +
    "\000\012\005\104\006\043\007\041\010\034\001\001\000" +
    "\012\005\103\006\043\007\041\010\034\001\001\000\012" +
    "\005\102\006\043\007\041\010\034\001\001\000\012\005" +
    "\101\006\043\007\041\010\034\001\001\000\012\005\100" +
    "\006\043\007\041\010\034\001\001\000\012\005\077\006" +
    "\043\007\041\010\034\001\001\000\002\001\001\000\012" +
    "\005\073\006\043\007\041\010\034\001\001\000\012\005" +
    "\072\006\043\007\041\010\034\001\001\000\012\005\071" +
    "\006\043\007\041\010\034\001\001\000\012\005\070\006" +
    "\043\007\041\010\034\001\001\000\012\005\067\006\043" +
    "\007\041\010\034\001\001\000\012\005\066\006\043\007" +
    "\041\010\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\075\006\043\007\041\010\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\111\020\112\001\001\000\030\004\117\011\024" +
    "\012\022\013\020\015\032\021\023\024\012\025\010\032" +
    "\030\033\011\034\007\001\001\000\012\005\113\006\043" +
    "\007\041\010\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\004\115\011\024\012\022" +
    "\013\020\015\032\021\023\024\012\025\010\032\030\033" +
    "\011\034\007\001\001\000\006\017\116\020\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\131\006\043\007\041\010\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\143\006\043\007\041\010\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\147\006\043\007\041\010\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\154\006\043\007\041\010\034\001\001" +
    "\000\002\001\001\000\012\005\156\006\043\007\041\010" +
    "\034\001\001\000\010\027\160\030\157\031\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\170\011" +
    "\024\012\022\013\020\015\032\021\023\024\012\025\010" +
    "\032\030\033\011\034\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\167\011\024\012\022\013\020\015\032\021\023\024" +
    "\012\025\010\032\030\033\011\034\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\176\006\043\007\041\010\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\200\011\024\012\022\013\020\015\032\021\023" +
    "\024\012\025\010\032\030\033\011\034\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador_Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador_Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador_Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) + " Columna "+s.right+ ". No se esperaba este componente: " +s.value);
        AnalizarArchivo.errores.add(new Error_( "Se detectó un error sintáctico ("+s.value+")", "Sintáctico",s.left, s.right));
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido");
        AnalizarArchivo.errores.add(new Error_( "Se detectó un error sintáctico ("+s.value+")", "Sintáctico",s.left, s.right));
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador_Sintactico$actions {
  private final Analizador_Sintactico parser;

  /** Constructor */
  CUP$Analizador_Sintactico$actions(Analizador_Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action_part00000000(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador_Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Analizador_Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= codigo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador_Sintactico$parser.done_parsing();
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // codigo ::= PR_INICIO instrucciones PR_FIN 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("codigo",0, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instruccion instrucciones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= si 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= while 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= repetir 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= para 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= impresiones 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= error 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= PR_INGRESAR lista_variables PR_COMO tipo_dato PR_CON_VALOR operacion SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",8, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lista_variables ::= IDENTIFICADOR SB_COMA lista_variables 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lista_variables ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_variables",7, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipo_dato ::= PR_NUMERO 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipo_dato ::= PR_CADENA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipo_dato ::= PR_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipo_dato ::= PR_CARACTER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",10, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operacion ::= operacion OP_SUMA operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operacion ::= operacion OP_RESTA operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operacion ::= operacion OP_MULTIPLICACION operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operacion ::= operacion OP_DIVISION operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operacion ::= operacion OP_MODULO operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operacion ::= operacion OP_POTENCIA SB_CORCHETE_LEFT operacion SB_CORCHETE_RIGHT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operacion ::= SB_PARENTESIS_LEFT operacion SB_PARENTESIS_RIGHT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacion ::= relacional 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operacion ::= logicos 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operacion ::= dato 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("operacion",3, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dato ::= DIGITOS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // dato ::= CADENA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // dato ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // dato ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // dato ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("dato",4, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // logicos ::= operacion OP_OR operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // logicos ::= operacion OP_AND operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // logicos ::= operacion OP_NOT operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("logicos",6, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // relacional ::= operacion OP_IGUAL operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("relacional",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // relacional ::= operacion OP_ES_DIFERENTE operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("relacional",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // relacional ::= operacion OP_MAYOR_QUE operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("relacional",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // relacional ::= operacion OP_MENOR_QUE operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("relacional",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relacional ::= operacion OP_MAYOR_IGUAL operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("relacional",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relacional ::= operacion OP_MENOR_IGUAL operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("relacional",5, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignacion ::= lista_variables PR_ASIGNACION operacion SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",9, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // si ::= PR_SI ciclo_si PR_FIN_SI 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("si",11, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ciclo_si ::= operacion PR_ENTONCES instruccion o_si 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ciclo_si",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ciclo_si ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ciclo_si",12, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // o_si ::= PR_O_SI operacion PR_ENTONCES instruccion o_si 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("o_si",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // o_si ::= delo_contrario 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("o_si",13, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // delo_contrario ::= PR_DE_LO_CONTRARIO instruccion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("delo_contrario",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // delo_contrario ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("delo_contrario",14, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // while ::= PR_MIENTRAS ciclo_while PR_FIN_MIENTRAS 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("while",15, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ciclo_while ::= not operacion PR_HACER instruccion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ciclo_while",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ciclo_while ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ciclo_while",16, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // not ::= OP_NOT 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("not",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // not ::= 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("not",17, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // repetir ::= PR_REPETIR instruccion PR_HASTA_QUE operacion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("repetir",18, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // para ::= PR_PARA ciclo_para PR_FIN_PARA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("para",19, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ciclo_para ::= lista_variables PR_ASIGNACION operacion PR_HASTA operacion lista_para 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("ciclo_para",20, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // lista_para ::= hacer 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_para",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // lista_para ::= con_incremental 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("lista_para",23, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // hacer ::= PR_HACER instruccion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("hacer",21, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // con_incremental ::= PR_CON PR_INCREMENTAL DIGITOS PR_HACER instruccion 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("con_incremental",22, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // impresiones ::= impresionL 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("impresiones",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // impresiones ::= impresionM 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("impresiones",24, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // impresionL ::= PR_IMPRIMIR operacion SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("impresionL",25, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // impresionM ::= PR_IMPRIMIR_NL operacion SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Analizador_Sintactico$result = parser.getSymbolFactory().newSymbol("impresionM",26, ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.elementAt(CUP$Analizador_Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador_Sintactico$stack.peek()), RESULT);
            }
          return CUP$Analizador_Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador_Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador_Sintactico$do_action(
    int                        CUP$Analizador_Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Analizador_Sintactico$parser,
    java.util.Stack            CUP$Analizador_Sintactico$stack,
    int                        CUP$Analizador_Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Analizador_Sintactico$do_action_part00000000(
                               CUP$Analizador_Sintactico$act_num,
                               CUP$Analizador_Sintactico$parser,
                               CUP$Analizador_Sintactico$stack,
                               CUP$Analizador_Sintactico$top);
    }
}

}
