/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizadores/A_Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3, 47,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0, 19,  0,  0,  0,  0, 21, 43,  5,  4, 40, 44, 31, 24,  2, 
    18, 18, 18, 18, 18, 18, 18, 18, 18, 18,  0, 23, 41,  0, 32, 46, 
     0, 11, 39, 28, 10,  8, 13, 29, 35, 26, 38,  6, 14, 30, 27, 12, 
    36, 37,  9, 16, 33, 34,  7,  6,  6, 42,  6,  0, 20,  0,  0, 17, 
     0, 11, 39, 28, 10,  8, 13, 29, 35, 26, 38,  6, 14, 30, 22, 12, 
    36, 37,  9, 16, 33, 34,  7,  6,  6, 42,  6,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 47,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 45, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\7\6\1\1"+
    "\1\6\1\1\1\7\1\1\1\6\1\10\1\1\3\6"+
    "\1\11\1\12\3\6\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\0\1\21\2\0\6\6\1\22\1\0\1\6"+
    "\1\0\2\6\1\0\1\23\1\6\1\23\3\0\1\24"+
    "\1\0\1\6\2\0\7\6\1\0\1\6\1\25\4\6"+
    "\1\21\2\0\4\6\1\0\1\26\1\0\1\6\2\27"+
    "\1\6\1\0\1\6\1\30\1\7\1\24\1\0\1\6"+
    "\3\0\12\6\1\31\1\0\1\6\1\0\5\6\2\0"+
    "\1\32\2\0\4\6\1\0\1\33\2\0\1\6\1\0"+
    "\1\6\1\0\1\24\1\6\3\0\5\6\1\0\1\34"+
    "\3\6\1\0\1\6\1\0\2\6\1\35\2\6\1\32"+
    "\2\0\4\6\1\0\1\36\5\0\1\6\2\37\1\40"+
    "\1\6\3\0\5\6\3\0\3\6\1\0\1\6\2\41"+
    "\1\42\2\6\2\0\3\6\1\0\1\6\3\0\1\43"+
    "\4\0\1\6\1\44\1\45\2\0\1\45\3\6\1\46"+
    "\4\0\1\47\2\0\1\6\1\0\2\6\2\0\3\6"+
    "\2\50\6\0\2\51\2\0\3\6\6\0\1\6\2\0"+
    "\1\6\1\52\1\0\1\53\2\54\1\55\1\56\5\0"+
    "\1\57\1\60\1\61\1\60\1\61\1\62\5\0\2\63"+
    "\1\0\2\64\3\0\1\65\3\0\1\66\4\0\1\67"+
    "\3\0\1\70\10\0\1\71\1\0\1\72\2\0\1\73"+
    "\1\74\1\75\1\0\1\76\7\0\1\77\1\100\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[339];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\60\0\60\0\300\0\360"+
    "\0\u0120\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\60\0\u0330\0\u0360\0\u0390\0\u03c0"+
    "\0\u03f0\0\60\0\u0420\0\u0450\0\u0480\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\u04b0\0\60\0\u04e0\0\u0510\0\u0540"+
    "\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\300\0\u0660\0\u0690"+
    "\0\u06c0\0\u06f0\0\u0720\0\u0750\0\60\0\u0780\0\300\0\u07b0"+
    "\0\u07e0\0\u0810\0\60\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900"+
    "\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80"+
    "\0\60\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0"+
    "\0\u0c00\0\u0c30\0\u0c60\0\u0c90\0\u0cc0\0\300\0\u0cf0\0\u0d20"+
    "\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\60\0\u07e0\0\u0e40"+
    "\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0"+
    "\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\300"+
    "\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290"+
    "\0\u0b70\0\u12c0\0\u04e0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0"+
    "\0\u13e0\0\u1410\0\60\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500"+
    "\0\u1530\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650"+
    "\0\u1680\0\u16b0\0\u16e0\0\u1710\0\300\0\u1740\0\u1770\0\u17a0"+
    "\0\u17d0\0\u1800\0\u1830\0\u1860\0\u1890\0\300\0\u18c0\0\u18f0"+
    "\0\u0b70\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\u1a40"+
    "\0\60\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60\0\60"+
    "\0\300\0\60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\u1c80"+
    "\0\u1cb0\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00"+
    "\0\u1e30\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\300\0\u1f20\0\u1f50"+
    "\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0"+
    "\0\u2100\0\u2130\0\60\0\u2160\0\u2190\0\u21c0\0\u21f0\0\u2220"+
    "\0\300\0\60\0\u2250\0\u2280\0\300\0\u22b0\0\u22e0\0\u2310"+
    "\0\300\0\u2340\0\u2370\0\u23a0\0\u23d0\0\300\0\u2400\0\u2430"+
    "\0\u2460\0\u2490\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580\0\u25b0"+
    "\0\u25e0\0\60\0\300\0\u2610\0\u2640\0\u2670\0\u26a0\0\u26d0"+
    "\0\u2700\0\60\0\300\0\u2730\0\u2760\0\u2790\0\u27c0\0\u27f0"+
    "\0\u2820\0\u2850\0\u2880\0\u28b0\0\u28e0\0\u2910\0\u2940\0\u2970"+
    "\0\u29a0\0\u29d0\0\300\0\u2a00\0\60\0\60\0\300\0\300"+
    "\0\300\0\u2a30\0\u2a60\0\u2a90\0\u2ac0\0\u2af0\0\60\0\60"+
    "\0\u2b20\0\300\0\u2b50\0\300\0\u2b80\0\u2bb0\0\u2be0\0\u2c10"+
    "\0\u2c40\0\60\0\300\0\u2c70\0\60\0\300\0\u2ca0\0\u2cd0"+
    "\0\u2d00\0\60\0\u2d30\0\u2d60\0\u2d90\0\60\0\u2dc0\0\u2df0"+
    "\0\u2e20\0\u2e50\0\60\0\u2e80\0\u2eb0\0\u2ee0\0\60\0\u2f10"+
    "\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0\0\u3000\0\u3030\0\u3060\0\60"+
    "\0\u3090\0\60\0\u30c0\0\u30f0\0\60\0\60\0\60\0\u3120"+
    "\0\60\0\u3150\0\u3180\0\u31b0\0\u31e0\0\u3210\0\u3240\0\u3270"+
    "\0\60\0\60\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[339];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\2\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\7\1\16\1\17"+
    "\1\20\1\21\1\22\2\2\1\23\1\24\1\2\1\25"+
    "\1\26\1\23\1\27\1\7\1\30\1\31\1\32\2\7"+
    "\1\33\1\34\2\7\1\35\1\36\1\37\1\7\1\40"+
    "\1\41\1\42\1\43\62\0\1\3\1\0\1\3\54\0"+
    "\3\44\1\45\1\46\53\44\6\0\11\7\1\0\1\7"+
    "\5\0\1\7\3\0\5\7\2\0\7\7\2\0\1\7"+
    "\13\0\11\7\1\47\1\50\5\0\1\51\3\0\1\7"+
    "\1\51\3\7\2\0\5\7\1\52\1\7\2\0\1\7"+
    "\13\0\2\7\1\53\6\7\1\0\1\7\5\0\1\7"+
    "\3\0\5\7\2\0\7\7\2\0\1\7\13\0\2\7"+
    "\1\54\6\7\1\0\1\7\5\0\1\7\3\0\5\7"+
    "\2\0\7\7\2\0\1\7\13\0\11\7\1\0\1\7"+
    "\5\0\1\55\3\0\1\7\1\55\3\7\2\0\7\7"+
    "\2\0\1\7\13\0\3\7\1\56\5\7\1\0\1\7"+
    "\1\57\4\0\1\7\3\0\5\7\2\0\7\7\2\0"+
    "\1\7\13\0\5\7\1\60\3\7\1\0\1\7\5\0"+
    "\1\7\2\0\1\61\1\62\4\7\2\0\1\7\1\63"+
    "\5\7\2\0\1\7\15\0\1\64\20\0\2\65\33\0"+
    "\2\7\1\66\6\7\1\0\1\7\5\0\1\7\2\0"+
    "\1\65\1\67\4\7\2\0\7\7\2\0\1\7\13\0"+
    "\11\70\1\0\1\70\1\0\1\70\3\0\1\70\3\0"+
    "\5\70\2\0\7\70\2\0\1\70\27\0\1\21\5\0"+
    "\1\71\27\0\23\72\1\73\1\74\33\72\6\0\11\7"+
    "\1\0\1\7\5\0\1\7\3\0\5\7\2\0\1\7"+
    "\1\75\5\7\2\0\1\7\33\0\1\76\4\0\1\76"+
    "\2\0\1\77\27\0\11\7\1\0\1\7\5\0\1\100"+
    "\3\0\1\7\1\100\2\7\1\101\2\0\7\7\2\0"+
    "\1\7\13\0\5\7\1\102\1\103\2\7\1\0\1\7"+
    "\5\0\1\7\3\0\5\7\2\0\7\7\2\0\1\7"+
    "\13\0\2\7\1\104\2\7\1\105\1\106\2\7\1\0"+
    "\1\7\5\0\1\7\2\0\1\107\1\110\4\7\2\0"+
    "\7\7\2\0\1\7\45\0\1\111\25\0\5\7\1\112"+
    "\3\7\1\0\1\7\5\0\1\7\3\0\5\7\2\0"+
    "\7\7\2\0\1\7\13\0\5\7\1\113\1\114\2\7"+
    "\1\0\1\7\5\0\1\7\3\0\5\7\2\0\7\7"+
    "\2\0\1\7\13\0\6\7\1\115\2\7\1\0\1\7"+
    "\5\0\1\7\3\0\5\7\2\0\7\7\2\0\1\7"+
    "\5\0\3\44\1\45\54\44\3\46\1\116\1\117\1\44"+
    "\52\46\21\0\1\120\44\0\11\7\1\0\1\7\1\120"+
    "\4\0\1\7\3\0\5\7\2\0\7\7\2\0\1\7"+
    "\13\0\11\7\1\0\1\7\5\0\1\7\3\0\5\7"+
    "\2\0\1\121\6\7\2\0\1\7\13\0\2\7\1\122"+
    "\6\7\1\0\1\7\5\0\1\7\3\0\5\7\2\0"+
    "\7\7\2\0\1\7\13\0\11\7\1\0\1\7\5\0"+
    "\1\7\3\0\5\7\2\0\1\123\2\7\1\124\3\7"+
    "\2\0\1\7\13\0\11\7\1\0\1\7\1\125\4\0"+
    "\1\7\3\0\5\7\2\0\7\7\2\0\1\7\13\0"+
    "\4\7\1\126\4\7\1\0\1\7\5\0\1\7\3\0"+
    "\5\7\2\0\7\7\2\0\1\7\24\0\2\127\45\0"+
    "\10\7\1\130\1\0\1\7\5\0\1\7\3\0\5\7"+
    "\2\0\7\7\2\0\1\7\33\0\1\131\4\0\1\131"+
    "\32\0\11\7\1\0\1\7\5\0\1\132\3\0\1\7"+
    "\1\132\3\7\2\0\7\7\2\0\1\7\13\0\11\7"+
    "\1\0\1\7\5\0\1\133\3\0\1\7\1\133\3\7"+
    "\2\0\7\7\2\0\1\7\42\0\1\134\30\0\11\7"+
    "\1\0\1\7\5\0\1\7\3\0\3\7\1\135\1\7"+
    "\2\0\7\7\2\0\1\7\13\0\11\70\1\0\1\70"+
    "\1\136\1\70\3\0\1\70\3\0\5\70\2\0\7\70"+
    "\2\0\1\70\27\0\1\137\35\0\23\72\1\73\57\72"+
    "\1\140\1\72\2\141\31\72\6\0\11\7\1\0\1\7"+
    "\5\0\1\7\3\0\4\7\1\142\2\0\7\7\2\0"+
    "\1\7\36\0\2\143\2\0\1\144\66\0\1\145\21\0"+
    "\11\7\1\0\1\7\5\0\1\7\2\0\1\143\1\146"+
    "\2\7\1\147\1\7\2\0\7\7\2\0\1\7\13\0"+
    "\11\7\1\0\1\7\5\0\1\7\3\0\5\7\2\0"+
    "\3\7\1\150\3\7\2\0\1\7\13\0\3\7\1\151"+
    "\1\152\4\7\1\0\1\7\5\0\1\7\3\0\5\7"+
    "\2\0\7\7\2\0\1\7\13\0\11\7\1\0\1\7"+
    "\5\0\1\153\3\0\1\7\1\153\2\7\1\154\2\0"+
    "\7\7\2\0\1\7\13\0\11\7\1\0\1\7\5\0"+
    "\1\155\3\0\1\7\1\155\3\7\2\0\1\156\6\7"+
    "\2\0\1\7\13\0\11\7\1\0\1\7\5\0\1\7"+
    "\3\0\5\7\2\0\7\7\2\0\1\157\13\0\4\7"+
    "\1\160\4\7\1\0\1\7\5\0\1\7\3\0\5\7"+
    "\2\0\7\7\2\0\1\7\15\0\1\161\55\0\2\7"+
    "\1\162\6\7\1\0\1\7\5\0\1\7\3\0\5\7"+
    "\2\0\7\7\2\0\1\7\13\0\11\7\1\163\1\164"+
    "\5\0\1\7\3\0\2\7\1\165\2\7\2\0\7\7"+
    "\2\0\1\7\13\0\3\7\1\166\5\7\1\0\1\7"+
    "\5\0\1\7\3\0\5\7\2\0\7\7\2\0\1\7"+
    "\13\0\11\7\1\0\1\7\5\0\1\7\3\0\5\7"+
    "\2\0\1\167\6\7\2\0\1\7\13\0\6\7\1\170"+
    "\2\7\1\0\1\7\5\0\1\7\3\0\5\7\2\0"+
    "\7\7\2\0\1\7\5\0\4\171\1\172\1\0\52\171"+
    "\2\46\1\173\1\116\1\117\1\44\52\46\12\0\1\174"+
    "\16\0\2\175\33\0\6\7\1\176\2\7\1\0\1\7"+
    "\5\0\1\7\3\0\5\7\2\0\7\7\2\0\1\7"+
    "\13\0\11\7\1\0\1\7\5\0\1\7\3\0\2\7"+
    "\1\177\2\7\2\0\7\7\2\0\1\7\13\0\6\7"+
    "\1\200\2\7\1\0\1\7\5\0\1\7\3\0\5\7"+
    "\2\0\7\7\2\0\1\7\13\0\2\7\1\201\6\7"+
    "\1\0\1\7\5\0\1\7\3\0\5\7\2\0\7\7"+
    "\2\0\1\7\23\0\1\202\72\0\2\203\33\0\11\7"+
    "\1\204\1\7\5\0\1\7\3\0\5\7\2\0\7\7"+
    "\2\0\1\7\26\0\1\205\44\0\11\7\1\0\1\7"+
    "\1\205\4\0\1\7\3\0\5\7\2\0\7\7\2\0"+
    "\1\7\13\0\11\7\1\0\1\7\5\0\1\7\3\0"+
    "\2\7\1\206\2\7\2\0\7\7\2\0\1\7\47\0"+
    "\1\207\23\0\11\7\1\0\1\7\5\0\1\7\3\0"+
    "\5\7\2\0\1\7\1\210\5\7\2\0\1\7\30\0"+
    "\1\211\34\0\23\72\1\212\34\72\6\0\2\7\1\213"+
    "\6\7\1\0\1\7\5\0\1\7\3\0\5\7\2\0"+
    "\7\7\2\0\1\7\41\0\1\214\34\0\1\215\57\0"+
    "\1\216\54\0\11\7\1\0\1\7\5\0\1\7\3\0"+
    "\2\7\1\217\2\7\2\0\7\7\2\0\1\7\13\0"+
    "\3\7\1\220\5\7\1\0\1\7\5\0\1\7\3\0"+
    "\5\7\2\0\7\7\2\0\1\7\13\0\3\7\1\221"+
    "\5\7\1\0\1\7\5\0\1\7\3\0\5\7\2\0"+
    "\7\7\2\0\1\7\13\0\5\7\1\222\3\7\1\0"+
    "\1\7\5\0\1\7\3\0\5\7\2\0\7\7\2\0"+
    "\1\7\13\0\2\7\1\223\6\7\1\0\1\7\5\0"+
    "\1\7\3\0\5\7\2\0\7\7\2\0\1\7\13\0"+
    "\11\7\1\0\1\7\1\224\4\0\1\7\3\0\5\7"+
    "\2\0\7\7\2\0\1\7\13\0\6\7\1\225\2\7"+
    "\1\0\1\7\5\0\1\7\3\0\5\7\2\0\7\7"+
    "\2\0\1\7\13\0\6\7\1\226\2\7\1\0\1\7"+
    "\5\0\1\7\3\0\5\7\2\0\7\7\2\0\1\7"+
    "\13\0\6\7\1\227\2\7\1\0\1\7\5\0\1\7"+
    "\3\0\5\7\2\0\7\7\2\0\1\7\13\0\6\7"+
    "\1\230\2\7\1\0\1\7\5\0\1\7\3\0\5\7"+
    "\2\0\7\7\2\0\1\7\33\0\1\231\4\0\1\231"+
    "\32\0\11\7\1\0\1\7\5\0\1\232\3\0\1\7"+
    "\1\232\3\7\2\0\7\7\2\0\1\7\46\0\1\233"+
    "\24\0\11\7\1\0\1\7\5\0\1\7\3\0\5\7"+
    "\2\0\1\234\6\7\2\0\1\7\13\0\2\7\1\235"+
    "\6\7\1\0\1\7\5\0\1\7\3\0\5\7\2\0"+
    "\7\7\2\0\1\7\13\0\5\7\1\236\3\7\1\0"+
    "\1\7\5\0\1\7\3\0\5\7\2\0\7\7\2\0"+
    "\1\7\13\0\2\7\1\237\6\7\1\0\1\7\5\0"+
    "\1\7\3\0\5\7\2\0\7\7\2\0\1\7\13\0"+
    "\10\7\1\240\1\0\1\7\5\0\1\7\3\0\5\7"+
    "\2\0\7\7\2\0\1\7\5\0\2\171\1\241\1\171"+
    "\1\172\1\0\52\171\31\0\2\242\62\0\1\243\30\0"+
    "\11\7\1\0\1\7\5\0\1\244\3\0\1\7\1\244"+
    "\3\7\2\0\7\7\2\0\1\7\13\0\11\7\1\0"+
    "\1\7\5\0\1\7\3\0\5\7\2\0\1\7\1\245"+
    "\5\7\2\0\1\7\13\0\3\7\1\246\5\7\1\0"+
    "\1\7\5\0\1\7\3\0\5\7\2\0\7\7\2\0"+
    "\1\7\13\0\11\7\1\0\1\7\5\0\1\7\3\0"+
    "\5\7\2\0\1\247\6\7\2\0\1\7\21\0\1\250"+
    "\57\0\1\251\60\0\1\252\1\0\2\253\15\0\1\254"+
    "\5\0\1\255\21\0\11\7\1\0\1\7\5\0\1\7"+
    "\2\0\1\256\1\257\4\7\2\0\7\7\2\0\1\7"+
    "\33\0\1\260\4\0\1\260\32\0\11\7\1\0\1\7"+
    "\5\0\1\261\3\0\1\7\1\261\3\7\2\0\7\7"+
    "\2\0\1\7\34\0\1\262\36\0\3\7\1\263\5\7"+
    "\1\0\1\7\5\0\1\7\3\0\5\7\2\0\7\7"+
    "\2\0\1\7\36\0\2\264\35\0\1\265\100\0\2\266"+
    "\33\0\11\7\1\0\1\7\5\0\1\7\2\0\1\264"+
    "\1\267\4\7\2\0\7\7\2\0\1\7\13\0\2\7"+
    "\1\270\6\7\1\0\1\7\5\0\1\7\3\0\5\7"+
    "\2\0\7\7\2\0\1\7\13\0\11\7\1\0\1\7"+
    "\5\0\1\7\2\0\1\266\1\271\4\7\2\0\7\7"+
    "\2\0\1\7\13\0\11\7\1\0\1\7\5\0\1\7"+
    "\3\0\2\7\1\272\2\7\2\0\7\7\2\0\1\7"+
    "\13\0\11\7\1\0\1\7\5\0\1\273\3\0\1\7"+
    "\1\273\3\7\2\0\7\7\2\0\1\7\14\0\1\274"+
    "\21\0\2\275\11\0\1\276\21\0\3\7\1\277\5\7"+
    "\1\0\1\7\5\0\1\7\3\0\5\7\2\0\7\7"+
    "\2\0\1\7\13\0\4\7\1\300\4\7\1\0\1\7"+
    "\5\0\1\7\3\0\5\7\2\0\7\7\2\0\1\7"+
    "\13\0\3\7\1\301\5\7\1\0\1\7\5\0\1\7"+
    "\3\0\5\7\2\0\7\7\2\0\1\7\46\0\1\302"+
    "\24\0\11\7\1\0\1\7\5\0\1\7\3\0\5\7"+
    "\2\0\1\303\6\7\2\0\1\7\20\0\1\304\52\0"+
    "\5\7\1\305\3\7\1\0\1\7\5\0\1\7\3\0"+
    "\5\7\2\0\7\7\2\0\1\7\13\0\3\7\1\306"+
    "\5\7\1\0\1\7\5\0\1\7\3\0\5\7\2\0"+
    "\7\7\2\0\1\7\13\0\11\7\1\0\1\7\5\0"+
    "\1\307\3\0\1\7\1\307\3\7\2\0\7\7\2\0"+
    "\1\7\13\0\2\7\1\310\6\7\1\0\1\7\5\0"+
    "\1\7\3\0\5\7\2\0\7\7\2\0\1\7\22\0"+
    "\1\311\104\0\1\312\23\0\11\7\1\0\1\7\5\0"+
    "\1\7\3\0\2\7\1\313\2\7\2\0\7\7\2\0"+
    "\1\7\13\0\11\7\1\0\1\7\5\0\1\7\3\0"+
    "\5\7\2\0\1\314\6\7\2\0\1\7\13\0\11\7"+
    "\1\0\1\7\5\0\1\315\3\0\1\7\1\315\3\7"+
    "\2\0\7\7\2\0\1\7\13\0\11\7\1\0\1\7"+
    "\5\0\1\7\2\0\1\316\1\317\4\7\2\0\7\7"+
    "\2\0\1\7\26\0\1\320\100\0\1\321\25\0\1\322"+
    "\20\0\2\323\35\0\1\324\20\0\2\325\40\0\1\326"+
    "\60\0\1\327\51\0\6\7\1\330\2\7\1\0\1\7"+
    "\5\0\1\7\3\0\5\7\2\0\7\7\2\0\1\7"+
    "\13\0\6\7\1\331\2\7\1\0\1\7\5\0\1\7"+
    "\3\0\5\7\2\0\7\7\2\0\1\7\21\0\1\332"+
    "\62\0\2\333\75\0\1\334\27\0\6\7\1\335\2\7"+
    "\1\0\1\7\5\0\1\7\3\0\5\7\2\0\7\7"+
    "\2\0\1\7\13\0\11\7\1\333\1\336\5\0\1\7"+
    "\3\0\5\7\2\0\7\7\2\0\1\7\13\0\11\7"+
    "\1\0\1\7\5\0\1\7\3\0\4\7\1\337\2\0"+
    "\7\7\2\0\1\7\13\0\11\7\1\0\1\7\5\0"+
    "\1\7\3\0\5\7\2\0\1\340\6\7\2\0\1\7"+
    "\13\0\5\7\1\341\3\7\1\0\1\7\5\0\1\7"+
    "\3\0\5\7\2\0\7\7\2\0\1\7\20\0\1\342"+
    "\72\0\1\343\4\0\1\343\37\0\1\344\52\0\11\7"+
    "\1\0\1\7\1\345\4\0\1\7\3\0\5\7\2\0"+
    "\7\7\2\0\1\7\13\0\6\7\1\346\2\7\1\0"+
    "\1\7\5\0\1\7\3\0\5\7\2\0\7\7\2\0"+
    "\1\7\13\0\11\7\1\0\1\7\1\347\4\0\1\7"+
    "\3\0\5\7\2\0\7\7\2\0\1\7\16\0\1\350"+
    "\54\0\3\7\1\351\5\7\1\0\1\7\5\0\1\7"+
    "\3\0\5\7\2\0\7\7\2\0\1\7\26\0\1\352"+
    "\44\0\11\7\1\0\1\7\1\352\4\0\1\7\3\0"+
    "\5\7\2\0\7\7\2\0\1\7\13\0\11\7\1\0"+
    "\1\7\5\0\1\7\3\0\2\7\1\353\2\7\2\0"+
    "\7\7\2\0\1\7\13\0\5\7\1\354\3\7\1\0"+
    "\1\7\5\0\1\7\3\0\5\7\2\0\7\7\2\0"+
    "\1\7\15\0\1\355\62\0\1\356\52\0\2\7\1\357"+
    "\6\7\1\0\1\7\5\0\1\7\3\0\5\7\2\0"+
    "\7\7\2\0\1\7\13\0\5\7\1\360\3\7\1\0"+
    "\1\7\5\0\1\7\3\0\5\7\2\0\7\7\2\0"+
    "\1\7\13\0\5\7\1\361\3\7\1\0\1\7\5\0"+
    "\1\7\3\0\5\7\2\0\7\7\2\0\1\7\16\0"+
    "\1\362\54\0\3\7\1\363\5\7\1\0\1\7\5\0"+
    "\1\7\3\0\5\7\2\0\7\7\2\0\1\7\41\0"+
    "\1\364\51\0\1\365\4\0\1\365\61\0\1\366\63\0"+
    "\1\367\26\0\1\370\60\0\1\371\74\0\1\372\4\0"+
    "\1\372\32\0\11\7\1\0\1\7\5\0\1\373\3\0"+
    "\1\7\1\373\3\7\2\0\7\7\2\0\1\7\20\0"+
    "\1\374\75\0\2\375\33\0\5\7\1\376\3\7\1\0"+
    "\1\7\5\0\1\7\3\0\5\7\2\0\7\7\2\0"+
    "\1\7\13\0\11\7\1\0\1\7\5\0\1\7\2\0"+
    "\1\375\1\377\4\7\2\0\7\7\2\0\1\7\13\0"+
    "\2\7\1\u0100\6\7\1\0\1\7\5\0\1\7\3\0"+
    "\5\7\2\0\7\7\2\0\1\7\23\0\1\u0101\75\0"+
    "\1\u0102\34\0\1\u0103\77\0\2\u0104\56\0\2\u0105\40\0"+
    "\1\u0106\52\0\5\7\1\u0107\3\7\1\0\1\7\5\0"+
    "\1\7\3\0\5\7\2\0\7\7\2\0\1\7\52\0"+
    "\1\u0108\20\0\11\7\1\0\1\7\5\0\1\7\2\0"+
    "\1\u0109\1\u010a\4\7\2\0\7\7\2\0\1\7\13\0"+
    "\11\7\1\0\1\7\5\0\1\u010b\3\0\1\7\1\u010b"+
    "\3\7\2\0\7\7\2\0\1\7\16\0\1\u010c\64\0"+
    "\1\u010d\47\0\11\7\1\u010e\1\u010f\5\0\1\7\3\0"+
    "\5\7\2\0\7\7\2\0\1\7\13\0\3\7\1\u0110"+
    "\5\7\1\0\1\7\5\0\1\7\3\0\5\7\2\0"+
    "\7\7\2\0\1\7\13\0\3\7\1\u0111\5\7\1\0"+
    "\1\7\5\0\1\7\3\0\5\7\2\0\7\7\2\0"+
    "\1\7\21\0\1\u0112\77\0\1\u0113\65\0\1\u0114\31\0"+
    "\1\u0115\71\0\1\u0116\4\0\1\u0116\37\0\1\u0117\55\0"+
    "\1\u0118\57\0\1\u0119\54\0\3\7\1\u011a\5\7\1\0"+
    "\1\7\5\0\1\7\3\0\5\7\2\0\7\7\2\0"+
    "\1\7\13\0\3\7\1\u011b\5\7\1\0\1\7\5\0"+
    "\1\7\3\0\5\7\2\0\7\7\2\0\1\7\13\0"+
    "\3\7\1\u011c\5\7\1\0\1\7\5\0\1\7\3\0"+
    "\5\7\2\0\7\7\2\0\1\7\21\0\1\u011d\54\0"+
    "\1\u011e\61\0\1\u011f\101\0\1\u0120\57\0\1\u0121\41\0"+
    "\2\u0122\45\0\11\7\1\u0122\1\u0123\5\0\1\7\3\0"+
    "\5\7\2\0\7\7\2\0\1\7\47\0\1\u0124\30\0"+
    "\1\u0125\52\0\5\7\1\u0126\3\7\1\0\1\7\5\0"+
    "\1\7\3\0\5\7\2\0\7\7\2\0\1\7\15\0"+
    "\1\u0127\75\0\1\u0128\4\0\1\u0128\55\0\2\u0129\53\0"+
    "\1\u012a\4\0\1\u012a\36\0\1\u012b\106\0\1\u012c\37\0"+
    "\1\u012d\44\0\11\7\1\0\1\7\1\u012d\4\0\1\7"+
    "\3\0\5\7\2\0\7\7\2\0\1\7\16\0\1\u012e"+
    "\56\0\1\u012f\105\0\1\u0130\63\0\1\u0131\57\0\1\u0132"+
    "\25\0\1\u0133\75\0\1\u0134\4\0\1\u0134\65\0\1\u0135"+
    "\32\0\1\u0136\57\0\1\u0137\54\0\1\u0138\74\0\1\u0139"+
    "\4\0\1\u0139\62\0\1\u013a\31\0\1\u013b\62\0\1\u013c"+
    "\57\0\1\u013d\105\0\1\u013e\27\0\1\u013f\74\0\1\u0140"+
    "\4\0\1\u0140\37\0\1\u0141\62\0\1\u0142\51\0\1\u0143"+
    "\110\0\1\u0144\34\0\1\u0145\57\0\1\u0146\51\0\1\u0147"+
    "\62\0\1\u0148\63\0\2\u0149\65\0\1\u014a\4\0\1\u014a"+
    "\35\0\1\u014b\57\0\1\u014c\107\0\1\u014d\32\0\1\u014e"+
    "\74\0\2\u014f\40\0\1\u0150\63\0\2\u0151\53\0\1\u0152"+
    "\61\0\1\u0153\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\2\11\15\1\1\11\5\1\1\11"+
    "\3\1\6\11\1\0\1\11\2\0\7\1\1\0\1\1"+
    "\1\0\2\1\1\0\1\11\2\1\3\0\1\11\1\0"+
    "\1\1\2\0\7\1\1\0\1\1\1\11\5\1\2\0"+
    "\4\1\1\0\1\1\1\0\4\1\1\0\1\1\1\11"+
    "\2\1\1\0\1\1\3\0\13\1\1\0\1\1\1\0"+
    "\5\1\2\0\1\1\2\0\4\1\1\0\1\11\2\0"+
    "\1\1\1\0\1\1\1\0\2\1\3\0\5\1\1\0"+
    "\4\1\1\0\1\1\1\0\6\1\2\0\4\1\1\0"+
    "\1\11\5\0\1\1\1\11\1\1\1\11\1\1\3\0"+
    "\5\1\3\0\3\1\1\0\6\1\2\0\3\1\1\0"+
    "\1\1\3\0\1\11\4\0\2\1\1\11\2\0\5\1"+
    "\4\0\1\1\2\0\1\1\1\0\2\1\2\0\3\1"+
    "\1\11\1\1\6\0\1\11\1\1\2\0\3\1\6\0"+
    "\1\1\2\0\2\1\1\0\2\11\3\1\5\0\2\11"+
    "\4\1\5\0\1\11\1\1\1\0\1\11\1\1\3\0"+
    "\1\11\3\0\1\11\4\0\1\11\3\0\1\11\10\0"+
    "\1\11\1\0\1\11\2\0\3\11\1\0\1\11\7\0"+
    "\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[339];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
      yyline = 1;
    yycolumn = 1;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error, "+yytext());
            } 
            // fall through
          case 66: break;
          case 2: 
            { 
            } 
            // fall through
          case 67: break;
          case 3: 
            { return new Symbol(sym.OP_DIVISION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 68: break;
          case 4: 
            { return new Symbol(sym.OP_MULTIPLICACION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 69: break;
          case 5: 
            { return new Symbol(sym.SB_PARENTESIS_RIGHT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 70: break;
          case 6: 
            { return new Symbol(sym.CARACTER, yycolumn, yyline, yytext());
            } 
            // fall through
          case 71: break;
          case 7: 
            { return new Symbol(sym.DIGITOS, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 8: 
            { return new Symbol(sym.SB_PUNTO_Y_COMA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 9: 
            { return new Symbol(sym.OP_RESTA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 10: 
            { return new Symbol(sym.OP_MENOR_QUE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 11: 
            { return new Symbol(sym.OP_SUMA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 12: 
            { return new Symbol(sym.OP_MAYOR_QUE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 13: 
            { return new Symbol(sym.SB_PARENTESIS_LEFT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 14: 
            { return new Symbol(sym.SB_COMA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 15: 
            { return new Symbol(sym.SB_INTERROGACION_LEFT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 16: 
            { return new Symbol(sym.SB_INTERROGACION_RIGHT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 17: 
            { return new Symbol(sym.COMENTARIO1, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 18: 
            { return new Symbol(sym.OP_OR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 19: 
            { return new Symbol(sym.PR_SI, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 20: 
            { return new Symbol(sym.CADENA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 85: break;
          case 21: 
            { return new Symbol(sym.PR_ASIGNACION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 22: 
            { return new Symbol(sym.OP_AND, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 23: 
            { return new Symbol(sym.PR_FIN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 24: 
            { return new Symbol(sym.IDENTIFICADOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 25: 
            { return new Symbol(sym.OP_MODULO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 26: 
            { return new Symbol(sym.COMENTARIO2, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 27: 
            { return new Symbol(sym.PR_O_SI, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 28: 
            { return new Symbol(sym.PR_COMO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 29: 
            { return new Symbol(sym.PR_PARA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 30: 
            { return new Symbol(sym.BOOLEAN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 31: 
            { return new Symbol(sym.PR_SEGUN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 32: 
            { return new Symbol(sym.CARACTER_E, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 33: 
            { return new Symbol(sym.PR_HASTA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 34: 
            { return new Symbol(sym.PR_HACER, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 35: 
            { return new Symbol(sym.PR_FIN_SI, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 36: 
            { return new Symbol(sym.PR_NUMERO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 37: 
            { return new Symbol(sym.PR_INICIO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 38: 
            { return new Symbol(sym.PR_CADENA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 39: 
            { return new Symbol(sym.PR_METODO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 40: 
            { return new Symbol(sym.PR_REPETIR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 41: 
            { return new Symbol(sym.PR_FUNCION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 42: 
            { return new Symbol(sym.PR_BOOLEAN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 43: 
            { return new Symbol(sym.OP_IGUAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 44: 
            { return new Symbol(sym.PR_ENTONCES, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 45: 
            { return new Symbol(sym.PR_EJECUTAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 46: 
            { return new Symbol(sym.PR_RETORNAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 47: 
            { return new Symbol(sym.PR_FIN_PARA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 48: 
            { return new Symbol(sym.PR_INGRESAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 49: 
            { return new Symbol(sym.PR_IMPRIMIR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 50: 
            { return new Symbol(sym.PR_CARACTER, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 51: 
            { return new Symbol(sym.PR_MIENTRAS, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 52: 
            { return new Symbol(sym.OP_POTENCIA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 53: 
            { return new Symbol(sym.PR_FIN_SEGUN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 54: 
            { return new Symbol(sym.PR_CON_VALOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 55: 
            { return new Symbol(sym.PR_HASTA_QUE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 56: 
            { return new Symbol(sym.PR_FIN_METODO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 57: 
            { return new Symbol(sym.PR_FIN_FUNCION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 58: 
            { return new Symbol(sym.PR_IMPRIMIR_NL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 59: 
            { return new Symbol(sym.OP_MENOR_IGUAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 60: 
            { return new Symbol(sym.OP_MAYOR_IGUAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 61: 
            { return new Symbol(sym.OP_ES_DIFERENTE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 62: 
            { return new Symbol(sym.PR_FIN_MIENTRAS, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 63: 
            { return new Symbol(sym.PR_CON_PARAMETROS, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 64: 
            { return new Symbol(sym.PR_DE_LO_CONTRARIO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 65: 
            { return new Symbol(sym.PR_CON_INCREMENTAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
