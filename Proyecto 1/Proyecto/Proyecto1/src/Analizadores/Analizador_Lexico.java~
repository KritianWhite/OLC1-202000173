/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizadores/A_Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3, 58,  1,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    14,  5,  8, 16, 16, 16, 16, 10, 20, 21, 29, 28, 27, 18,  0,  2, 
    13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 26, 12,  4, 16,  6, 16, 
    16, 44, 48, 42, 46, 36, 19, 19, 19, 57, 19, 19, 50, 34, 30, 40, 
    54, 19, 38, 19, 52, 32, 19, 19, 19, 19, 19, 24,  9, 25, 17, 17, 
    17, 43, 47, 41, 45, 35,  7,  7,  7, 56,  7,  7, 49, 33, 11, 39, 
    53,  7, 37,  7, 51, 31,  7,  7,  7,  7,  7, 22, 16, 23, 15,  0, 
     0,  0,  0,  0,  0, 58,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\1\2\4"+
    "\1\5\1\4\1\6\1\4\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\11\4\1\0"+
    "\1\21\10\0\1\22\6\0\1\23\7\0\1\24\2\0"+
    "\1\24\1\0\1\25\1\0\1\22\1\0\1\24\2\0"+
    "\1\26\2\0\1\27\5\0\1\30\1\0\1\22\6\0"+
    "\1\31\6\0\1\32\1\33\1\0\1\34\3\0\1\35"+
    "\1\0\1\36\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u0127\0\u01d8\0\u0127\0\u0213\0\u024e\0\u0289\0\u0127\0\u0127"+
    "\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127\0\u0127"+
    "\0\u02c4\0\u02ff\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461"+
    "\0\u049c\0\u04d7\0\73\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe"+
    "\0\u0639\0\u0674\0\u06af\0\73\0\u06ea\0\u0725\0\u0760\0\u079b"+
    "\0\u07d6\0\u0811\0\73\0\u084c\0\u0887\0\u08c2\0\u08fd\0\u0938"+
    "\0\u0973\0\u09ae\0\u04d7\0\u09e9\0\u0a24\0\73\0\u0a5f\0\73"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u06af\0\u0b4b\0\u0b86\0\73\0\u0bc1"+
    "\0\u0bfc\0\73\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\73"+
    "\0\u0d5e\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0"+
    "\0\73\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\73"+
    "\0\73\0\u105d\0\73\0\u1098\0\u10d3\0\u110e\0\73\0\u1149"+
    "\0\73\0\73";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\2\6\1\7\1\10"+
    "\1\11\1\6\1\12\1\13\1\14\1\3\1\2\1\6"+
    "\1\11\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\7\1\16"+
    "\1\32\1\33\1\7\1\16\1\7\1\16\1\7\1\16"+
    "\1\34\1\35\1\7\1\16\1\7\1\16\1\36\1\37"+
    "\1\7\1\16\1\7\1\16\1\40\1\41\1\2\1\7"+
    "\1\16\75\0\1\3\1\0\1\3\12\0\1\3\54\0"+
    "\3\42\1\43\12\42\1\44\1\45\53\42\5\0\1\46"+
    "\10\0\1\47\1\50\71\0\1\47\1\50\71\0\1\51"+
    "\1\52\53\0\10\53\1\54\1\55\4\53\1\56\1\57"+
    "\53\53\16\0\1\51\1\52\17\0\2\60\50\0\1\61"+
    "\1\62\61\0\1\63\7\0\1\64\1\50\71\0\1\65"+
    "\1\66\71\0\1\65\1\66\17\0\2\60\50\0\1\51"+
    "\1\52\27\0\2\67\40\0\1\65\1\66\27\0\2\67"+
    "\40\0\1\51\1\52\33\0\2\70\34\0\1\65\1\66"+
    "\33\0\2\70\34\0\1\51\1\52\27\0\2\71\40\0"+
    "\1\65\1\66\27\0\2\71\40\0\1\51\1\52\27\0"+
    "\2\72\40\0\1\65\1\66\27\0\2\72\22\0\3\42"+
    "\1\43\72\42\1\43\13\42\1\45\55\42\1\73\1\43"+
    "\3\73\1\42\3\73\1\42\1\73\1\42\1\74\1\42"+
    "\3\73\1\42\12\73\35\42\5\46\1\75\65\46\17\0"+
    "\1\50\55\0\1\76\1\0\3\76\1\0\3\76\1\0"+
    "\1\76\1\0\1\77\1\0\3\76\1\0\12\76\54\0"+
    "\1\52\62\0\1\100\3\0\1\100\2\0\1\101\20\0"+
    "\1\100\1\0\1\100\1\0\1\100\1\0\1\100\1\0"+
    "\1\100\1\0\1\100\1\0\1\100\1\0\1\100\1\0"+
    "\1\100\1\0\1\100\1\0\1\100\1\0\1\100\2\0"+
    "\1\100\2\0\10\53\1\54\72\53\1\102\1\53\2\103"+
    "\67\53\1\54\6\53\1\57\55\53\1\104\1\53\3\104"+
    "\1\53\1\54\2\104\1\53\1\104\1\53\1\105\1\53"+
    "\3\104\1\53\12\104\35\53\41\0\2\106\47\0\1\62"+
    "\70\0\1\107\1\110\62\0\1\63\10\0\1\50\72\0"+
    "\1\66\71\0\1\111\4\0\1\112\12\0\1\112\1\0"+
    "\1\112\1\0\1\112\1\0\1\112\1\0\1\112\1\0"+
    "\1\112\1\0\1\112\1\0\1\112\1\0\1\112\1\0"+
    "\1\112\1\0\1\112\1\0\1\112\1\0\1\112\2\0"+
    "\1\112\56\0\2\113\61\0\2\114\6\0\2\115\63\0"+
    "\2\116\105\0\2\117\6\0\2\42\1\73\1\43\3\73"+
    "\1\42\3\73\1\42\1\73\3\42\3\73\1\42\12\73"+
    "\35\42\6\0\1\120\66\0\1\76\1\0\3\76\1\0"+
    "\3\76\1\0\1\76\3\0\3\76\1\0\12\76\44\0"+
    "\1\100\3\0\1\100\23\0\1\100\1\0\1\100\1\0"+
    "\1\100\1\0\1\100\1\0\1\100\1\0\1\100\1\0"+
    "\1\100\1\0\1\100\1\0\1\100\1\0\1\100\1\0"+
    "\1\100\1\0\1\100\2\0\1\100\12\0\1\121\62\0"+
    "\10\53\1\122\64\53\1\104\1\53\3\104\1\53\1\54"+
    "\2\104\1\53\1\104\3\53\3\104\1\53\12\104\35\53"+
    "\43\0\2\123\43\0\1\107\100\0\1\112\12\0\1\112"+
    "\1\0\1\112\1\0\1\112\1\0\1\112\1\0\1\112"+
    "\1\0\1\112\1\0\1\112\1\0\1\112\1\0\1\112"+
    "\1\0\1\112\1\0\1\112\1\0\1\112\1\0\1\112"+
    "\2\0\1\112\40\0\2\124\105\0\2\125\61\0\2\126"+
    "\107\0\2\127\53\0\2\130\42\0\1\131\123\0\2\132"+
    "\105\0\2\133\61\0\2\134\33\0\1\135\22\0\1\135"+
    "\77\0\2\136\41\0\1\137\22\0\1\137\103\0\2\140"+
    "\71\0\2\141\105\0\2\142\61\0\2\143\71\0\2\144"+
    "\67\0\2\145\63\0\2\146\41\0\1\147\22\0\1\147"+
    "\123\0\3\150\46\0\2\151\77\0\2\152\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4484];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\37\1\1\0\1\11\10\0\1\11\6\0"+
    "\1\11\7\0\1\1\2\0\1\11\1\0\1\11\1\0"+
    "\1\1\1\0\1\1\2\0\1\11\2\0\1\11\5\0"+
    "\1\11\1\0\1\1\6\0\1\11\6\0\2\11\1\0"+
    "\1\11\3\0\1\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[106];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
      yyline = 1;
    yycolumn = 1;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Este es un error léxico: " + yytext() + ". Linea "+yyline+", columna "+yycolumn+".");
    // Agregar errores a objeto para imprimir errores....
            } 
            // fall through
          case 32: break;
          case 2: 
            { /*ignore*/
            } 
            // fall through
          case 33: break;
          case 3: 
            { return new Symbol(sym.DIVISION, yycolumn, yyline, yytext())
            } 
            // fall through
          case 34: break;
          case 4: 
            { return new Symbol(sym.CARACTER, yycolumn, yyline, yytext()
            } 
            // fall through
          case 35: break;
          case 5: 
            { return new Symbol(sym.PUNTOYCOMA, yycolumn, yyline, yytext())
            } 
            // fall through
          case 36: break;
          case 6: 
            { return new Symbol(sym.MENOS, yycolumn, yyline, yytext())
            } 
            // fall through
          case 37: break;
          case 7: 
            { return new Symbol(sym.PARENTESISLEFT, yycolumn, yyline, yytext())
            } 
            // fall through
          case 38: break;
          case 8: 
            { return new Symbol(sym.PARENTESISRIGHT, yycolumn, yyline, yytext())
            } 
            // fall through
          case 39: break;
          case 9: 
            { return new Symbol(sym.LLAVELEFT, yycolumn, yyline, yytext())
            } 
            // fall through
          case 40: break;
          case 10: 
            { return new Symbol(sym.LLAVERIGHT, yycolumn, yyline, yytext())
            } 
            // fall through
          case 41: break;
          case 11: 
            { return new Symbol(sym.CORCHETELEFT, yycolumn, yyline, yytext())
            } 
            // fall through
          case 42: break;
          case 12: 
            { return new Symbol(sym.COCHETERIGHT, yycolumn, yyline, yytext())
            } 
            // fall through
          case 43: break;
          case 13: 
            { return new Symbol(sym.DOSPUNTOS, yycolumn, yyline, yytext())
            } 
            // fall through
          case 44: break;
          case 14: 
            { return new Symbol(sym.COMA, yycolumn, yyline, yytext())
            } 
            // fall through
          case 45: break;
          case 15: 
            { return new Symbol(sym.MAS, yycolumn, yyline, yytext())
            } 
            // fall through
          case 46: break;
          case 16: 
            { return new Symbol(sym.POR, yycolumn, yyline, yytext())
            } 
            // fall through
          case 47: break;
          case 17: 
            { return new Symbol(sym.COMENTARIO_L, yycolumn, yyline, yytext()
            } 
            // fall through
          case 48: break;
          case 18: 
            { return new Symbol(sym.CADENA, yycolumn, yyline, yytext()
            } 
            // fall through
          case 49: break;
          case 19: 
            { return new Symbol(sym.FLECHAS, yycolumn, yyline, yytext()
            } 
            // fall through
          case 50: break;
          case 20: 
            { return new Symbol(sym.CONJUNTO_S, yycolumn, yyline, yytext()
            } 
            // fall through
          case 51: break;
          case 21: 
            { return new Symbol(sym.MINUSCULAS, yycolumn, yyline, yytext()
            } 
            // fall through
          case 52: break;
          case 22: 
            { return new Symbol(sym.DIGITOS, yycolumn, yyline, yytext()
            } 
            // fall through
          case 53: break;
          case 23: 
            { return new Symbol(sym.MAYUSCULAS, yycolumn, yyline, yytext()
            } 
            // fall through
          case 54: break;
          case 24: 
            { return new Symbol(sym.COMENTARIO_M, yycolumn, yyline, yytext()
            } 
            // fall through
          case 55: break;
          case 25: 
            { return new Symbol(sym.CARACTER_E, yycolumn, yyline, yytext()
            } 
            // fall through
          case 56: break;
          case 26: 
            { return new Symbol(sym.PR_NUMERO,yycolumn, yyline, yytext())
            } 
            // fall through
          case 57: break;
          case 27: 
            { return new Symbol(sym.PR_MOD, yycolumn, yyline, yytext())
            } 
            // fall through
          case 58: break;
          case 28: 
            { return new Symbol(sym.PR_CADENA,yycolumn, yyline, yytext())
            } 
            // fall through
          case 59: break;
          case 29: 
            { return new Symbol(sym.PR_BOOLEAN,yycolumn, yyline, yytext())
            } 
            // fall through
          case 60: break;
          case 30: 
            { return new Symbol(sym.PR_CARACTER,yycolumn, yyline, yytext())
            } 
            // fall through
          case 61: break;
          case 31: 
            { return new Symbol(sym.PR_POTENCIA, yycolumn, yyline, yytext())
            } 
            // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
