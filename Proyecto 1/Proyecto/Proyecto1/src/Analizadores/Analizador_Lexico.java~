/* The following code was generated by JFlex 1.7.0 */

package Analizadores;
import Error_.*;
import java_cup.runtime.*;
import java.util.LinkedList;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Analizadores/A_Lexico.jflex</tt>
 */
public class Analizador_Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  3,  5,  5,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0,  8,  0, 13,  0,  0,  7, 50, 51,  6, 46, 52, 38, 32,  2, 
    28, 28, 28, 28, 28, 28, 28, 28, 28, 28,  0, 31,  0,  0, 39, 54, 
     0, 21, 45, 35, 20, 18, 23, 36, 41, 34, 44, 27, 24, 37, 11, 22, 
    42, 43, 19, 29, 12, 40, 17, 27, 27, 47, 27, 48, 10, 49,  0, 26, 
     0, 21, 45, 35, 20, 18, 23, 36, 41, 34, 44, 27, 24, 37, 30, 22, 
    42, 43, 19, 29, 12, 40, 17, 27, 27, 47, 27, 14,  0, 16,  0,  0, 
     0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 53, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\14\1\1\5\1\6"+
    "\3\1\1\7\3\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\3\0\1\20\3\0\1\21\12\0"+
    "\1\22\5\0\1\23\12\0\1\24\4\0\2\25\1\0"+
    "\1\20\2\0\1\21\1\26\10\0\1\27\2\0\1\30"+
    "\2\0\1\31\1\5\6\0\1\32\4\0\1\33\7\0"+
    "\1\34\2\0\1\21\12\0\1\35\13\0\1\36\6\0"+
    "\1\37\3\0\1\34\1\40\11\0\1\41\5\0\1\42"+
    "\10\0\1\43\1\0\1\44\1\0\1\45\1\46\2\0"+
    "\1\47\12\0\1\50\4\0\1\51\4\0\1\52\3\0"+
    "\1\53\13\0\1\54\6\0\1\55\13\0\1\56\1\57"+
    "\1\0\1\60\1\61\1\62\5\0\1\63\1\0\1\64"+
    "\1\65\1\66\4\0\1\67\1\0\1\70\3\0\1\71"+
    "\4\0\1\72\3\0\1\73\3\0\1\74\10\0\1\75"+
    "\1\0\1\76\1\77\3\0\1\100\1\0\1\101\5\0"+
    "\1\102\1\103\1\0\1\104\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\67\0\334\0\u0113\0\u014a"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302"+
    "\0\u0339\0\u0370\0\67\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483"+
    "\0\u04ba\0\u04f1\0\67\0\67\0\67\0\67\0\67\0\67"+
    "\0\67\0\67\0\u0528\0\u055f\0\u0596\0\67\0\u05cd\0\u0604"+
    "\0\u063b\0\67\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\u07f3\0\u082a\0\u0861\0\67\0\u0898\0\u08cf\0\u0906"+
    "\0\u093d\0\u0974\0\67\0\u09ab\0\u09e2\0\u0a19\0\u0a50\0\u0a87"+
    "\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\67\0\u0bd1\0\u0c08"+
    "\0\u0c3f\0\u0c76\0\67\0\u0cad\0\u0ce4\0\u0596\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\67\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0f0a\0\u0f41\0\67\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054"+
    "\0\67\0\u09e2\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u1167\0\u119e"+
    "\0\u11d5\0\u120c\0\u1243\0\u127a\0\u12b1\0\67\0\u12e8\0\u131f"+
    "\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432\0\67\0\u1469\0\u14a0"+
    "\0\u14d7\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621"+
    "\0\u1658\0\u168f\0\u16c6\0\67\0\u16fd\0\u1734\0\u176b\0\u17a2"+
    "\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\67"+
    "\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\67\0\u1aa4"+
    "\0\u1adb\0\u1b12\0\u1b12\0\67\0\u1b49\0\u1b80\0\u1bb7\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u1cca\0\u1d01\0\67\0\u1d38\0\u1d6f"+
    "\0\u1da6\0\u1ddd\0\u1e14\0\67\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0"+
    "\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8"+
    "\0\u20df\0\67\0\u2116\0\u214d\0\67\0\u2184\0\u21bb\0\u21f2"+
    "\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\67"+
    "\0\u23aa\0\u23e1\0\u2418\0\u244f\0\67\0\u2486\0\u24bd\0\u24f4"+
    "\0\u252b\0\67\0\u2562\0\u2599\0\u25d0\0\67\0\u2607\0\u263e"+
    "\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788\0\u27bf\0\u27f6"+
    "\0\u282d\0\67\0\u2864\0\u289b\0\u28d2\0\u2909\0\u2940\0\u2977"+
    "\0\67\0\u29ae\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a\0\u2ac1\0\u2af8"+
    "\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\67\0\67\0\u2c0b\0\67"+
    "\0\67\0\67\0\u2c42\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\67"+
    "\0\u2d55\0\67\0\u2d8c\0\67\0\u2dc3\0\u2dfa\0\u2e31\0\u2e68"+
    "\0\67\0\u2e9f\0\67\0\u2ed6\0\u2f0d\0\u2f44\0\67\0\u2f7b"+
    "\0\u2fb2\0\u2fe9\0\u3020\0\67\0\u3057\0\u308e\0\u30c5\0\67"+
    "\0\u30fc\0\u3133\0\u316a\0\67\0\u31a1\0\u31d8\0\u320f\0\u3246"+
    "\0\u327d\0\u32b4\0\u32eb\0\u3322\0\67\0\u3359\0\67\0\67"+
    "\0\u3390\0\u33c7\0\u33fe\0\67\0\u3435\0\67\0\u346c\0\u34a3"+
    "\0\u34da\0\u3511\0\u3548\0\67\0\67\0\u357f\0\67\0\67";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\3\1\0\1\5\1\6\1\7"+
    "\1\3\1\2\1\10\5\2\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\2\1\20\1\21\1\2\1\22"+
    "\1\20\1\10\1\23\1\2\2\24\1\25\1\2\1\26"+
    "\1\27\2\2\1\30\1\31\2\2\1\32\1\33\1\2"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\70\0"+
    "\1\3\1\0\2\3\4\0\1\3\57\0\1\43\3\0"+
    "\1\44\60\0\3\45\1\0\3\45\1\46\2\0\1\47"+
    "\2\45\1\50\51\45\10\51\1\52\1\51\1\53\54\51"+
    "\26\0\1\54\21\0\1\55\40\0\1\56\57\0\1\57"+
    "\15\0\1\60\3\0\1\60\1\57\15\0\1\61\34\0"+
    "\1\62\66\0\1\63\57\0\1\64\22\0\1\64\53\0"+
    "\1\65\6\0\1\66\61\0\1\67\13\0\2\70\5\0"+
    "\1\71\40\0\1\72\16\0\2\73\37\0\2\74\4\0"+
    "\10\74\2\0\4\74\3\0\4\74\2\0\6\74\1\0"+
    "\1\74\43\0\1\22\3\0\1\75\41\0\1\76\22\0"+
    "\1\76\6\0\1\77\46\0\1\100\1\101\62\0\1\102"+
    "\2\0\1\103\1\104\12\0\2\105\73\0\1\106\44\0"+
    "\1\107\66\0\1\110\1\111\66\0\1\112\40\0\3\43"+
    "\1\113\1\114\1\0\61\43\6\44\1\115\60\44\7\0"+
    "\1\46\66\0\1\116\1\45\2\0\2\45\21\0\1\45"+
    "\37\0\1\46\6\0\1\117\50\0\10\51\1\52\65\51"+
    "\1\120\1\121\25\51\1\120\30\51\14\0\1\122\117\0"+
    "\1\123\44\0\1\124\57\0\1\125\104\0\1\126\56\0"+
    "\1\127\60\0\1\130\35\0\1\131\46\0\1\132\60\0"+
    "\1\133\73\0\1\134\3\0\1\134\61\0\1\135\51\0"+
    "\1\136\22\0\1\136\43\0\1\137\22\0\1\137\74\0"+
    "\1\140\35\0\2\74\4\0\10\74\1\0\1\141\4\74"+
    "\3\0\4\74\2\0\6\74\1\0\1\74\43\0\1\142"+
    "\73\0\2\143\1\144\1\145\74\0\1\146\37\0\1\147"+
    "\1\150\55\0\1\151\22\0\1\151\6\0\1\152\34\0"+
    "\1\153\1\154\21\0\1\153\107\0\1\155\33\0\1\156"+
    "\64\0\1\157\75\0\1\160\3\0\1\160\5\0\1\161"+
    "\46\0\1\162\57\0\1\163\100\0\1\164\43\0\1\113"+
    "\63\0\2\165\1\166\3\165\1\167\60\165\17\0\1\170"+
    "\14\0\1\170\32\0\10\51\1\171\56\51\10\0\1\172"+
    "\100\0\1\173\70\0\1\174\70\0\1\175\64\0\1\176"+
    "\14\0\2\177\67\0\1\200\51\0\1\201\62\0\1\202"+
    "\74\0\1\203\77\0\2\204\55\0\1\205\3\0\1\205"+
    "\63\0\1\206\77\0\1\207\73\0\1\210\61\0\1\211"+
    "\46\0\1\212\66\0\1\213\66\0\1\214\70\0\1\215"+
    "\63\0\1\216\76\0\1\217\62\0\1\220\66\0\1\221"+
    "\66\0\1\222\66\0\1\223\53\0\1\224\22\0\1\224"+
    "\44\0\1\225\74\0\1\226\71\0\1\227\63\0\1\230"+
    "\74\0\1\231\36\0\2\44\1\232\3\44\1\115\62\44"+
    "\1\233\3\44\1\115\60\44\17\0\1\170\1\45\13\0"+
    "\1\170\71\0\1\234\52\0\1\235\70\0\1\236\54\0"+
    "\1\237\22\0\1\237\71\0\2\240\70\0\1\241\72\0"+
    "\1\242\41\0\1\243\57\0\1\244\100\0\1\245\66\0"+
    "\1\246\67\0\1\247\1\0\1\250\3\0\1\250\7\0"+
    "\1\251\4\0\1\252\55\0\2\253\37\0\1\254\22\0"+
    "\1\254\71\0\2\255\46\0\1\256\66\0\1\257\105\0"+
    "\2\260\67\0\1\261\36\0\1\262\22\0\1\262\51\0"+
    "\1\263\30\0\1\264\37\0\1\265\67\0\1\266\65\0"+
    "\1\267\57\0\1\270\77\0\1\271\64\0\1\272\56\0"+
    "\1\273\22\0\1\273\52\0\1\274\46\0\1\165\112\0"+
    "\1\275\64\0\1\276\105\0\1\277\52\0\1\300\107\0"+
    "\1\301\32\0\1\302\65\0\1\303\22\0\1\303\71\0"+
    "\2\304\56\0\1\305\104\0\1\306\40\0\1\307\16\0"+
    "\2\310\46\0\1\311\16\0\2\312\51\0\1\313\67\0"+
    "\1\314\66\0\1\315\105\0\1\316\52\0\1\317\3\0"+
    "\1\317\76\0\1\320\35\0\1\321\77\0\1\322\66\0"+
    "\1\323\66\0\1\324\73\0\1\325\62\0\1\326\72\0"+
    "\1\327\57\0\1\330\75\0\1\331\77\0\1\332\50\0"+
    "\1\333\63\0\1\334\66\0\1\335\66\0\1\336\71\0"+
    "\1\337\66\0\1\340\66\0\1\341\64\0\1\342\106\0"+
    "\1\343\36\0\1\344\22\0\1\344\74\0\1\345\36\0"+
    "\1\346\74\0\1\347\67\0\1\350\56\0\1\351\22\0"+
    "\1\351\52\0\1\352\71\0\1\353\102\0\2\354\46\0"+
    "\1\355\74\0\1\356\61\0\1\357\71\0\1\360\66\0"+
    "\1\361\65\0\1\362\114\0\1\363\54\0\2\364\37\0"+
    "\1\365\22\0\1\365\53\0\1\205\74\0\1\366\3\0"+
    "\1\366\54\0\1\367\73\0\1\370\61\0\1\371\66\0"+
    "\1\372\71\0\1\373\103\0\1\374\73\0\1\375\44\0"+
    "\1\376\53\0\1\377\22\0\1\377\55\0\1\u0100\54\0"+
    "\1\u0101\22\0\1\u0101\53\0\1\u0102\66\0\1\u0103\66\0"+
    "\1\u0104\71\0\1\u0105\65\0\1\u0106\73\0\1\u0107\66\0"+
    "\1\u0108\65\0\1\u0109\3\0\1\u0109\101\0\1\u010a\43\0"+
    "\1\u010b\63\0\1\u010c\57\0\1\u010d\22\0\1\u010d\71\0"+
    "\2\u010e\37\0\1\u010f\22\0\1\u010f\54\0\1\u0110\56\0"+
    "\1\u0111\66\0\1\u0112\104\0\1\u0113\57\0\1\u0114\110\0"+
    "\1\u0115\62\0\2\u0116\65\0\2\u0117\46\0\1\u0118\57\0"+
    "\1\u0119\22\0\1\u0119\44\0\1\u011a\100\0\1\u011b\66\0"+
    "\1\u011c\63\0\1\u011d\70\0\1\u011e\54\0\1\u011f\22\0"+
    "\1\u011f\52\0\1\u0120\110\0\1\u0121\66\0\1\u0122\36\0"+
    "\1\u0123\75\0\1\u0124\56\0\1\u0125\22\0\1\u0125\55\0"+
    "\1\u0126\71\0\1\u0127\66\0\1\u0128\52\0\1\u0129\122\0"+
    "\1\u012a\66\0\1\u012b\40\0\1\u012c\71\0\1\u012d\72\0"+
    "\1\u012e\3\0\1\u012e\54\0\1\u012f\70\0\1\u0130\66\0"+
    "\1\u0131\64\0\1\u0132\71\0\1\u0133\70\0\1\u0134\66\0"+
    "\1\u0135\77\0\2\u0136\55\0\1\u0137\3\0\1\u0137\57\0"+
    "\1\u0138\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13750];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\15\1\1\11\7\1\10\11"+
    "\3\0\1\11\3\0\1\11\12\0\1\11\5\0\1\11"+
    "\12\0\1\11\4\0\1\11\1\1\1\0\1\1\2\0"+
    "\1\1\1\11\10\0\1\11\2\0\1\1\2\0\1\11"+
    "\1\1\6\0\1\1\4\0\1\11\7\0\1\11\2\0"+
    "\1\1\12\0\1\11\13\0\1\11\6\0\1\11\3\0"+
    "\1\1\1\11\11\0\1\11\5\0\1\11\10\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\2\0\1\11\12\0"+
    "\1\11\4\0\1\11\4\0\1\11\3\0\1\11\13\0"+
    "\1\11\6\0\1\11\13\0\2\11\1\0\3\11\5\0"+
    "\1\11\1\0\1\11\1\1\1\11\4\0\1\11\1\0"+
    "\1\11\3\0\1\11\4\0\1\11\3\0\1\11\3\0"+
    "\1\11\10\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\1\11\5\0\2\11\1\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[312];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public  LinkedList<Error_Lex> errores  = new LinkedList<Error_Lex>();
    public static String cadena;
    public static char ch;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Analizador_Lexico(java.io.Reader in) {
      yyline = 1;
    yycolumn = 1;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Este es un error lexico: "+yytext()+", en la linea: "+yyline+", en la columna: "+yycolumn);
    Error_Lex tmp = new Error_Lex("(Error lexico: " + yytext() + ")" , "Lexico", yyline, yycolumn);
    errores.add(tmp);
            } 
            // fall through
          case 70: break;
          case 2: 
            { 
            } 
            // fall through
          case 71: break;
          case 3: 
            { System.out.println("Reconocio OP_DIVISION, lexema:"+yytext());
                return new Symbol(sym.OP_DIVISION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 72: break;
          case 4: 
            { System.out.println("Reconocio OP_MULTIPLICACION, lexema:"+yytext());
                return new Symbol(sym.OP_MULTIPLICACION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 73: break;
          case 5: 
            { System.out.println("Reconocio DIGITOS, lexema:"+yytext());
                return new Symbol(sym.DIGITOS, yycolumn, yyline, yytext());
            } 
            // fall through
          case 74: break;
          case 6: 
            { System.out.println("Reconocio SB_PUNTO_Y_COMA, lexema:"+yytext());
                return new Symbol(sym.SB_PUNTO_Y_COMA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 75: break;
          case 7: 
            { System.out.println("Reconocio OP_RESTA, lexema:"+yytext());
                return new Symbol(sym.OP_RESTA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 76: break;
          case 8: 
            { System.out.println("Reconocio OP_SUMA, lexema:"+yytext());
                return new Symbol(sym.OP_SUMA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 77: break;
          case 9: 
            { System.out.println("Reconocio SB_CORCHETE_LEFT, lexema:"+yytext());
                return new Symbol(sym.SB_CORCHETE_LEFT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 78: break;
          case 10: 
            { System.out.println("Reconocio SB_CORCHETE_RIGHT, lexema:"+yytext());
                return new Symbol(sym.SB_CORCHETE_RIGHT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 79: break;
          case 11: 
            { System.out.println("Reconocio SB_PARENTESIS_LEFT, lexema:"+yytext());
                return new Symbol(sym.SB_PARENTESIS_LEFT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 80: break;
          case 12: 
            { System.out.println("Reconocio SB_PARENTESIS_RIGHT, lexema:"+yytext());
                return new Symbol(sym.SB_PARENTESIS_RIGHT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 81: break;
          case 13: 
            { System.out.println("Reconocio SB_COMA, lexema:"+yytext());
                return new Symbol(sym.SB_COMA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 82: break;
          case 14: 
            { System.out.println("Reconocio SB_INTERROGACION_LEFT, lexema:"+yytext());
                return new Symbol(sym.SB_INTERROGACION_LEFT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 83: break;
          case 15: 
            { System.out.println("Reconocio SB_INTERROGACION_RIGHT, lexema:"+yytext());
                return new Symbol(sym.SB_INTERROGACION_RIGHT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 84: break;
          case 16: 
            { cadena = "\""+yytext()+"\"";
                char [] cadena_div = cadena.toCharArray();
                String n = "";
                for (int i = 0; i < cadena_div.length; i++){
                    if (Character.isDigit(cadena_div[i])){
                        n += cadena_div[i];
                    };
                };
                int num = Integer.parseInt(n);
                char ch = (char)num;

                
                
                System.out.println("Reconocio CARACTER, lexema:"+ch);
                return new Symbol(sym.CARACTER, yycolumn, yyline, ch);
            } 
            // fall through
          case 85: break;
          case 17: 
            { System.out.println("Reconocio CADENA, lexema:"+yytext());
                return new Symbol(sym.CADENA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 86: break;
          case 18: 
            { System.out.println("Reconocio OP_OR, lexema:"+yytext());
                return new Symbol(sym.OP_OR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 87: break;
          case 19: 
            { System.out.println("Reconocio PR_SI, lexema:"+yytext());
                return new Symbol(sym.PR_SI, yycolumn, yyline, yytext());
            } 
            // fall through
          case 88: break;
          case 20: 
            { System.out.println("Reconocio PR_ASIGNACION, lexema:"+yytext());
                return new Symbol(sym.PR_ASIGNACION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 89: break;
          case 21: 
            { System.out.println("Reconocio COMENTARIO_L, lexema:"+yytext());
                return new Symbol(sym.COMENTARIO1, yycolumn, yyline, yytext());
            } 
            // fall through
          case 90: break;
          case 22: 
            { System.out.println("Reconocio OP_NOT, lexema:"+yytext());
                return new Symbol(sym.OP_NOT, yycolumn, yyline, yytext());
            } 
            // fall through
          case 91: break;
          case 23: 
            { System.out.println("Reconocio OP_AND, lexema:"+yytext());
                return new Symbol(sym.OP_AND, yycolumn, yyline, yytext());
            } 
            // fall through
          case 92: break;
          case 24: 
            { System.out.println("Reconocio PR_FIN, lexema:"+yytext());
                return new Symbol(sym.PR_FIN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 93: break;
          case 25: 
            { System.out.println("Reconocio IDENTIFICADOR, lexema:"+yytext());
                 return new Symbol(sym.IDENTIFICADOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 94: break;
          case 26: 
            { System.out.println("Reconocio PR_CON, lexema:"+yytext());
                return new Symbol(sym.PR_CON, yycolumn, yyline, yytext());
            } 
            // fall through
          case 95: break;
          case 27: 
            { System.out.println("Reconocio OP_MODULO, lexema:"+yytext());
                return new Symbol(sym.OP_MODULO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 96: break;
          case 28: 
            { System.out.println("Reconocio COMENTARIO_M, lexema:"+yytext());
                return new Symbol(sym.COMENTARIO2, yycolumn, yyline, yytext());
            } 
            // fall through
          case 97: break;
          case 29: 
            { System.out.println("Reconocio PR_O_SI, lexema:"+yytext());
                return new Symbol(sym.PR_O_SI, yycolumn, yyline, yytext());
            } 
            // fall through
          case 98: break;
          case 30: 
            { System.out.println("Reconocio PR_COMO, lexema:"+yytext());
                return new Symbol(sym.PR_COMO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 99: break;
          case 31: 
            { System.out.println("Reconocio PR_PARA, lexema:"+yytext());
                return new Symbol(sym.PR_PARA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 100: break;
          case 32: 
            { System.out.println("Reconocio CARACTER_E, lexema:"+yytext());
                return new Symbol(sym.CARACTER_E, yycolumn, yyline, yytext());
            } 
            // fall through
          case 101: break;
          case 33: 
            { System.out.println("Reconocio BOOLEAN, lexema:"+yytext());
                return new Symbol(sym.BOOLEAN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 102: break;
          case 34: 
            { System.out.println("Reconocio PR_SEGUN, lexema:"+yytext());
                return new Symbol(sym.PR_SEGUN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 103: break;
          case 35: 
            { System.out.println("Reconocio OP_MENOR_QUE, lexema:"+yytext());
                return new Symbol(sym.OP_MENOR_QUE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 104: break;
          case 36: 
            { System.out.println("Reconocio OP_MAYOR_QUE, lexema:"+yytext());
                return new Symbol(sym.OP_MAYOR_QUE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 105: break;
          case 37: 
            { System.out.println("Reconocio PR_HASTA, lexema:"+yytext());
                return new Symbol(sym.PR_HASTA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 106: break;
          case 38: 
            { System.out.println("Reconocio PR_HACER, lexema:"+yytext());
                return new Symbol(sym.PR_HACER, yycolumn, yyline, yytext());
            } 
            // fall through
          case 107: break;
          case 39: 
            { System.out.println("Reconocio PR_NUMERO, lexema:"+yytext());
                return new Symbol(sym.PR_NUMERO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 108: break;
          case 40: 
            { System.out.println("Reconocio PR_FIN_SI, lexema:"+yytext());
                return new Symbol(sym.PR_FIN_SI, yycolumn, yyline, yytext());
            } 
            // fall through
          case 109: break;
          case 41: 
            { System.out.println("Reconocio PR_INICIO, lexema:"+yytext());
                return new Symbol(sym.PR_INICIO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 110: break;
          case 42: 
            { System.out.println("Reconocio PR_CADENA, lexema:"+yytext());
                return new Symbol(sym.PR_CADENA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 111: break;
          case 43: 
            { System.out.println("Reconocio PR_METODO, lexema:"+yytext());
                return new Symbol(sym.PR_METODO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 112: break;
          case 44: 
            { System.out.println("Reconocio PR_REPETIR, lexema:"+yytext());
                return new Symbol(sym.PR_REPETIR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 113: break;
          case 45: 
            { System.out.println("Reconocio PR_FUNCION, lexema:"+yytext());
                return new Symbol(sym.PR_FUNCION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 114: break;
          case 46: 
            { System.out.println("Reconocio PR_BOOLEAN, lexema:"+yytext());
                return new Symbol(sym.PR_BOOLEAN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 115: break;
          case 47: 
            { System.out.println("Reconocio PR_ENTONCES, lexema:"+yytext());
                return new Symbol(sym.PR_ENTONCES, yycolumn, yyline, yytext());
            } 
            // fall through
          case 116: break;
          case 48: 
            { System.out.println("Reconocio OP_IGUAL, lexema:"+yytext());
                return new Symbol(sym.OP_IGUAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 117: break;
          case 49: 
            { System.out.println("Reconocio PR_EJECUTAR, lexema:"+yytext());
                return new Symbol(sym.PR_EJECUTAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 118: break;
          case 50: 
            { System.out.println("Reconocio PR_RETORNAR, lexema:"+yytext());
                return new Symbol(sym.PR_RETORNAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 119: break;
          case 51: 
            { System.out.println("Reconocio PR_FIN_PARA, lexema:"+yytext());
                return new Symbol(sym.PR_FIN_PARA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 120: break;
          case 52: 
            { System.out.println("Reconocio PR_INGRESAR, lexema:"+yytext());
                return new Symbol(sym.PR_INGRESAR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 121: break;
          case 53: 
            { System.out.println("Reconocio PR_IMPRIMIR, lexema:"+yytext());
                return new Symbol(sym.PR_IMPRIMIR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 122: break;
          case 54: 
            { System.out.println("Reconocio PR_CARACTER, lexema:"+yytext());
                return new Symbol(sym.PR_CARACTER, yycolumn, yyline, yytext());
            } 
            // fall through
          case 123: break;
          case 55: 
            { System.out.println("Reconocio PR_MIENTRAS, lexema:"+yytext());
                return new Symbol(sym.PR_MIENTRAS, yycolumn, yyline, yytext());
            } 
            // fall through
          case 124: break;
          case 56: 
            { System.out.println("Reconocio OP_POTENCIA, lexema:"+yytext());
                return new Symbol(sym.OP_POTENCIA, yycolumn, yyline, yytext());
            } 
            // fall through
          case 125: break;
          case 57: 
            { System.out.println("Reconocio PR_FIN_SEGUN, lexema:"+yytext());
                return new Symbol(sym.PR_FIN_SEGUN, yycolumn, yyline, yytext());
            } 
            // fall through
          case 126: break;
          case 58: 
            { System.out.println("Reconocio PR_CON_VALOR, lexema:"+yytext());
                return new Symbol(sym.PR_CON_VALOR, yycolumn, yyline, yytext());
            } 
            // fall through
          case 127: break;
          case 59: 
            { System.out.println("Reconocio PR_HASTA_QUE, lexema:"+yytext());
                return new Symbol(sym.PR_HASTA_QUE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 128: break;
          case 60: 
            { System.out.println("Reconocio PR_FIN_METODO, lexema:"+yytext());
                return new Symbol(sym.PR_FIN_METODO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 129: break;
          case 61: 
            { System.out.println("Reconocio PR_FIN_FUNCION, lexema:"+yytext());
                return new Symbol(sym.PR_FIN_FUNCION, yycolumn, yyline, yytext());
            } 
            // fall through
          case 130: break;
          case 62: 
            { System.out.println("Reconocio PR_INCREMENTAL, lexema:"+yytext());
                return new Symbol(sym.PR_INCREMENTAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 131: break;
          case 63: 
            { System.out.println("Reconocio PR_IMPRIMIR_NL, lexema:"+yytext());
                return new Symbol(sym.PR_IMPRIMIR_NL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 132: break;
          case 64: 
            { System.out.println("Reconocio OP_ES_DIFERENTE, lexema:"+yytext());
                return new Symbol(sym.OP_ES_DIFERENTE, yycolumn, yyline, yytext());
            } 
            // fall through
          case 133: break;
          case 65: 
            { System.out.println("Reconocio PR_FIN_MIENTRAS, lexema:"+yytext());
                return new Symbol(sym.PR_FIN_MIENTRAS, yycolumn, yyline, yytext());
            } 
            // fall through
          case 134: break;
          case 66: 
            { System.out.println("Reconocio OP_MENOR_IGUAL, lexema:"+yytext());
                return new Symbol(sym.OP_MENOR_IGUAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 135: break;
          case 67: 
            { System.out.println("Reconocio OP_MAYOR_IGUAL, lexema:"+yytext());
                return new Symbol(sym.OP_MAYOR_IGUAL, yycolumn, yyline, yytext());
            } 
            // fall through
          case 136: break;
          case 68: 
            { System.out.println("Reconocio PR_CON_PARAMETROS, lexema:"+yytext());
                    return new Symbol(sym.PR_CON_PARAMETROS, yycolumn, yyline, yytext());
            } 
            // fall through
          case 137: break;
          case 69: 
            { System.out.println("Reconocio PR_DE_LO_CONTRARIO, lexema:"+yytext());
                    return new Symbol(sym.PR_DE_LO_CONTRARIO, yycolumn, yyline, yytext());
            } 
            // fall through
          case 138: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
