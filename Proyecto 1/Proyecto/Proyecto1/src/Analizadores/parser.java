
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import Error_.Errores;
import Arbol.Nodo;
import Traducir.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\003\000\002\003" +
    "\005\000\002\003\004\000\002\004\004\000\002\004\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\007\004\000\002\007\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\014\011\000\002\017\005\000\002" +
    "\017\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\007\000\002\010\005\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\015" +
    "\006\000\002\020\005\000\002\021\006\000\002\021\002" +
    "\000\002\022\007\000\002\022\003\000\002\023\004\000" +
    "\002\023\002\000\002\030\005\000\002\031\006\000\002" +
    "\031\002\000\002\032\003\000\002\032\002\000\002\024" +
    "\007\000\002\026\004\000\002\026\003\000\002\026\003" +
    "\000\002\025\007\000\002\027\005\000\002\033\006\000" +
    "\002\034\005\000\002\035\010\000\002\040\003\000\002" +
    "\040\003\000\002\036\004\000\002\037\007\000\002\041" +
    "\003\000\002\041\003\000\002\042\004\000\002\044\004" +
    "\000\002\044\003\000\002\043\005\000\002\045\003\000" +
    "\002\045\003\000\002\046\006\000\002\047\007\000\002" +
    "\050\006\000\002\051\005\000\002\051\003\000\002\052" +
    "\004\000\002\053\003\000\002\053\003\000\002\054\006" +
    "\000\002\055\007\000\002\056\005\000\002\057\010\000" +
    "\002\060\005\000\002\060\003\000\002\061\003\000\002" +
    "\061\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\004\004\004\001\002\000\044\003\030\005" +
    "\010\006\013\012\052\017\017\022\022\027\045\031\044" +
    "\033\015\034\021\035\033\036\040\037\051\042\011\100" +
    "\032\101\031\104\014\001\002\000\004\002\000\001\002" +
    "\000\004\002\007\001\002\000\004\002\001\001\002\000" +
    "\004\002\ufffe\001\002\000\004\104\014\001\002\000\004" +
    "\011\302\001\002\000\004\104\014\001\002\000\060\003" +
    "\uffe8\006\uffe8\007\uffe8\011\uffe8\012\uffe8\017\uffe8\022\uffe8" +
    "\027\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\040" +
    "\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\071\uffe8\074\272" +
    "\100\uffe8\101\uffe8\104\uffe8\001\002\000\016\071\063\102" +
    "\074\103\066\104\073\106\062\107\065\001\002\000\070" +
    "\003\ufff1\005\ufff1\006\ufff1\012\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\017\ufff1\021\ufff1\022\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\076\ufff1\100\ufff1\101\ufff1" +
    "\104\ufff1\001\002\000\016\071\063\102\074\103\066\104" +
    "\073\106\062\107\065\001\002\000\070\003\ufff4\005\ufff4" +
    "\006\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021" +
    "\ufff4\022\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\076\ufff4\100\ufff4\101\ufff4\104\ufff4\001\002" +
    "\000\004\104\014\001\002\000\004\104\014\001\002\000" +
    "\070\003\uffec\005\uffec\006\uffec\012\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\021\uffec\022\uffec\026\uffec\027\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\036\uffec" +
    "\037\uffec\041\uffec\042\uffec\043\uffec\076\uffec\100\uffec\101" +
    "\uffec\104\uffec\001\002\000\044\003\ufffb\005\ufffb\006\ufffb" +
    "\012\ufffb\017\ufffb\022\ufffb\027\ufffb\031\ufffb\033\ufffb\034" +
    "\ufffb\035\ufffb\036\ufffb\037\ufffb\042\ufffb\100\ufffb\101\ufffb" +
    "\104\ufffb\001\002\000\070\003\uffb0\005\uffb0\006\uffb0\012" +
    "\uffb0\014\uffb0\015\uffb0\016\uffb0\017\uffb0\021\uffb0\022\uffb0" +
    "\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034" +
    "\uffb0\035\uffb0\036\uffb0\037\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\076\uffb0\100\uffb0\101\uffb0\104\uffb0\001\002\000\070\003" +
    "\uffb1\005\uffb1\006\uffb1\012\uffb1\014\uffb1\015\uffb1\016\uffb1" +
    "\017\uffb1\021\uffb1\022\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\037\uffb1" +
    "\041\uffb1\042\uffb1\043\uffb1\076\uffb1\100\uffb1\101\uffb1\104" +
    "\uffb1\001\002\000\070\003\ufff0\005\ufff0\006\ufff0\012\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0\022\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\041\ufff0\042\ufff0\043\ufff0\076" +
    "\ufff0\100\ufff0\101\ufff0\104\ufff0\001\002\000\070\003\uffeb" +
    "\005\uffeb\006\uffeb\012\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\021\uffeb\022\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\041" +
    "\uffeb\042\uffeb\043\uffeb\076\uffeb\100\uffeb\101\uffeb\104\uffeb" +
    "\001\002\000\070\003\uff9a\005\uff9a\006\uff9a\012\uff9a\014" +
    "\uff9a\015\uff9a\016\uff9a\017\uff9a\021\uff9a\022\uff9a\026\uff9a" +
    "\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\041\uff9a\042\uff9a\043\uff9a\076\uff9a" +
    "\100\uff9a\101\uff9a\104\uff9a\001\002\000\070\003\uff9b\005" +
    "\uff9b\006\uff9b\012\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\021\uff9b\022\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\076\uff9b\100\uff9b\101\uff9b\104\uff9b\001" +
    "\002\000\020\034\021\071\063\102\074\103\066\104\073" +
    "\106\062\107\065\001\002\000\044\003\ufff9\005\ufff9\006" +
    "\ufff9\012\ufff9\017\ufff9\022\ufff9\027\ufff9\031\ufff9\033\ufff9" +
    "\034\ufff9\035\ufff9\036\ufff9\037\ufff9\042\ufff9\100\ufff9\101" +
    "\ufff9\104\ufff9\001\002\000\044\003\ufffa\005\ufffa\006\ufffa" +
    "\012\ufffa\017\ufffa\022\ufffa\027\ufffa\031\ufffa\033\ufffa\034" +
    "\ufffa\035\ufffa\036\ufffa\037\ufffa\042\ufffa\100\ufffa\101\ufffa" +
    "\104\ufffa\001\002\000\070\003\uffef\005\uffef\006\uffef\012" +
    "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\021\uffef\022\uffef" +
    "\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\041\uffef\042\uffef\043\uffef" +
    "\076\uffef\100\uffef\101\uffef\104\uffef\001\002\000\070\003" +
    "\ufff3\005\ufff3\006\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\021\ufff3\022\ufff3\026\ufff3\027\ufff3\030\ufff3\031" +
    "\ufff3\032\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3" +
    "\041\ufff3\042\ufff3\043\ufff3\076\ufff3\100\ufff3\101\ufff3\104" +
    "\ufff3\001\002\000\016\071\063\102\074\103\066\104\073" +
    "\106\062\107\065\001\002\000\070\003\ufff2\005\ufff2\006" +
    "\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\021\ufff2" +
    "\022\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\076\ufff2\100\ufff2\101\ufff2\104\ufff2\001\002\000" +
    "\044\003\uffa2\005\uffa2\006\uffa2\012\uffa2\017\uffa2\022\uffa2" +
    "\027\uffa2\031\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037" +
    "\uffa2\042\uffa2\100\uffa2\101\uffa2\104\uffa2\001\002\000\044" +
    "\003\uffa3\005\uffa3\006\uffa3\012\uffa3\017\uffa3\022\uffa3\027" +
    "\uffa3\031\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\uffa3" +
    "\042\uffa3\100\uffa3\101\uffa3\104\uffa3\001\002\000\036\003" +
    "\030\006\013\012\052\017\017\022\022\027\045\031\044" +
    "\033\015\034\021\035\033\036\040\100\032\101\031\104" +
    "\014\001\002\000\022\030\uffc1\052\200\071\uffbf\102\uffbf" +
    "\103\uffbf\104\uffbf\106\uffbf\107\uffbf\001\002\000\070\003" +
    "\uffee\005\uffee\006\uffee\012\uffee\014\uffee\015\uffee\016\uffee" +
    "\017\uffee\021\uffee\022\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\041\uffee\042\uffee\043\uffee\076\uffee\100\uffee\101\uffee\104" +
    "\uffee\001\002\000\044\003\uffaa\005\uffaa\006\uffaa\012\uffaa" +
    "\017\uffaa\022\uffaa\027\uffaa\031\uffaa\033\uffaa\034\uffaa\035" +
    "\uffaa\036\uffaa\037\uffaa\042\uffaa\100\uffaa\101\uffaa\104\uffaa" +
    "\001\002\000\044\003\uffab\005\uffab\006\uffab\012\uffab\017" +
    "\uffab\022\uffab\027\uffab\031\uffab\033\uffab\034\uffab\035\uffab" +
    "\036\uffab\037\uffab\042\uffab\100\uffab\101\uffab\104\uffab\001" +
    "\002\000\004\104\014\001\002\000\020\016\uffc8\071\063" +
    "\102\074\103\066\104\073\106\062\107\065\001\002\000" +
    "\070\003\ufff6\005\ufff6\006\ufff6\012\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\021\ufff6\022\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\041\ufff6\042\ufff6\043\ufff6\076\ufff6\100\ufff6\101" +
    "\ufff6\104\ufff6\001\002\000\004\005\061\001\002\000\070" +
    "\003\ufff5\005\ufff5\006\ufff5\012\ufff5\014\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\021\ufff5\022\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\076\ufff5\100\ufff5\101\ufff5" +
    "\104\ufff5\001\002\000\070\003\uffed\005\uffed\006\uffed\012" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\021\uffed\022\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\041\uffed\042\uffed\043\uffed" +
    "\076\uffed\100\uffed\101\uffed\104\uffed\001\002\000\044\003" +
    "\030\005\ufffc\006\013\012\052\017\017\022\022\027\045" +
    "\031\044\033\015\034\021\035\033\036\040\037\051\042" +
    "\011\100\032\101\031\104\014\001\002\000\004\005\ufffd" +
    "\001\002\000\004\002\uffff\001\002\000\150\003\uffd8\005" +
    "\uffd8\006\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\026" +
    "\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\037\uffd8\041\uffd8\042\uffd8\043\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8" +
    "\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063\uffd8\064\uffd8\065" +
    "\uffd8\066\uffd8\070\uffd8\072\uffd8\073\uffd8\074\uffd8\076\uffd8" +
    "\077\uffd8\100\uffd8\101\uffd8\104\uffd8\001\002\000\016\071" +
    "\063\102\074\103\066\104\073\106\062\107\065\001\002" +
    "\000\150\003\uffdb\005\uffdb\006\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb" +
    "\063\uffdb\064\uffdb\065\uffdb\066\uffdb\070\uffdb\072\uffdb\073" +
    "\uffdb\074\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\104\uffdb" +
    "\001\002\000\150\003\uffd9\005\uffd9\006\uffd9\012\uffd9\013" +
    "\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\050\uffd9\051\uffd9\052\uffd9\053" +
    "\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9" +
    "\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\070\uffd9\072" +
    "\uffd9\073\uffd9\074\uffd9\076\uffd9\077\uffd9\100\uffd9\101\uffd9" +
    "\104\uffd9\001\002\000\150\003\uffd7\005\uffd7\006\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7" +
    "\037\uffd7\041\uffd7\042\uffd7\043\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\062\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\070" +
    "\uffd7\072\uffd7\073\uffd7\074\uffd7\076\uffd7\077\uffd7\100\uffd7" +
    "\101\uffd7\104\uffd7\001\002\000\004\016\152\001\002\000" +
    "\150\003\uffdc\005\uffdc\006\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc" +
    "\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063" +
    "\uffdc\064\uffdc\065\uffdc\066\uffdc\070\uffdc\072\uffdc\073\uffdc" +
    "\074\uffdc\076\uffdc\077\uffdc\100\uffdc\101\uffdc\104\uffdc\001" +
    "\002\000\042\013\076\050\110\051\113\052\105\053\103" +
    "\054\101\055\102\056\077\057\106\060\114\061\100\062" +
    "\107\063\075\064\104\065\112\066\111\001\002\000\150" +
    "\003\uffda\005\uffda\006\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\037\uffda\041\uffda\042\uffda" +
    "\043\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055" +
    "\uffda\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda" +
    "\064\uffda\065\uffda\066\uffda\070\uffda\072\uffda\073\uffda\074" +
    "\uffda\076\uffda\077\uffda\100\uffda\101\uffda\104\uffda\001\002" +
    "\000\150\003\uffd5\005\uffd5\006\uffd5\012\uffd5\013\uffd5\014" +
    "\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5" +
    "\063\uffd5\064\uffd5\065\uffd5\066\uffd5\070\uffd5\072\uffd5\073" +
    "\uffd5\074\uffd5\076\uffd5\077\uffd5\100\uffd5\101\uffd5\104\uffd5" +
    "\001\002\000\150\003\uffd6\005\uffd6\006\uffd6\012\uffd6\013" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\026\uffd6\027\uffd6\030\uffd6\031" +
    "\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6" +
    "\041\uffd6\042\uffd6\043\uffd6\050\uffd6\051\uffd6\052\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\070\uffd6\072" +
    "\uffd6\073\uffd6\074\uffd6\076\uffd6\077\uffd6\100\uffd6\101\uffd6" +
    "\104\uffd6\001\002\000\016\071\063\102\074\103\066\104" +
    "\073\106\062\107\065\001\002\000\036\003\030\006\013" +
    "\012\052\017\017\022\022\027\045\031\044\033\015\034" +
    "\021\035\033\036\040\100\032\101\031\104\014\001\002" +
    "\000\016\071\063\102\074\103\066\104\073\106\062\107" +
    "\065\001\002\000\016\071\063\102\074\103\066\104\073" +
    "\106\062\107\065\001\002\000\016\071\063\102\074\103" +
    "\066\104\073\106\062\107\065\001\002\000\016\071\063" +
    "\102\074\103\066\104\073\106\062\107\065\001\002\000" +
    "\016\071\063\102\074\103\066\104\073\106\062\107\065" +
    "\001\002\000\016\071\063\102\074\103\066\104\073\106" +
    "\062\107\065\001\002\000\016\071\063\102\074\103\066" +
    "\104\073\106\062\107\065\001\002\000\004\067\123\001" +
    "\002\000\016\071\063\102\074\103\066\104\073\106\062" +
    "\107\065\001\002\000\016\071\063\102\074\103\066\104" +
    "\073\106\062\107\065\001\002\000\016\071\063\102\074" +
    "\103\066\104\073\106\062\107\065\001\002\000\016\071" +
    "\063\102\074\103\066\104\073\106\062\107\065\001\002" +
    "\000\016\071\063\102\074\103\066\104\073\106\062\107" +
    "\065\001\002\000\016\071\063\102\074\103\066\104\073" +
    "\106\062\107\065\001\002\000\150\003\uffdf\005\uffdf\006" +
    "\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf" +
    "\020\uffdf\021\uffdf\022\uffdf\023\uffdf\024\uffdf\026\uffdf\027" +
    "\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf" +
    "\036\uffdf\037\uffdf\041\uffdf\042\uffdf\043\uffdf\050\uffdf\051" +
    "\uffdf\052\105\053\uffdf\054\uffdf\055\102\056\077\057\106" +
    "\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066" +
    "\uffdf\070\uffdf\072\uffdf\073\uffdf\074\uffdf\076\uffdf\077\uffdf" +
    "\100\uffdf\101\uffdf\104\uffdf\001\002\000\150\003\uffd4\005" +
    "\uffd4\006\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\041\uffd4\042\uffd4\043\uffd4\050" +
    "\110\051\uffd4\052\105\053\103\054\101\055\102\056\077" +
    "\057\106\060\114\061\100\062\107\063\075\064\104\065" +
    "\112\066\111\070\uffd4\072\uffd4\073\uffd4\074\uffd4\076\uffd4" +
    "\077\uffd4\100\uffd4\101\uffd4\104\uffd4\001\002\000\140\003" +
    "\uffcd\005\uffcd\006\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\041\uffcd\042\uffcd\043" +
    "\uffcd\050\uffcd\051\uffcd\052\105\053\103\054\101\055\102" +
    "\056\077\057\106\060\114\063\uffcd\064\uffcd\070\uffcd\072" +
    "\uffcd\073\uffcd\074\uffcd\076\uffcd\077\uffcd\100\uffcd\101\uffcd" +
    "\104\uffcd\001\002\000\140\003\uffcc\005\uffcc\006\uffcc\012" +
    "\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc" +
    "\021\uffcc\022\uffcc\023\uffcc\024\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\041\uffcc\042\uffcc\043\uffcc\050\uffcc\051\uffcc\052" +
    "\105\053\103\054\101\055\102\056\077\057\106\060\114" +
    "\063\uffcc\064\uffcc\070\uffcc\072\uffcc\073\uffcc\074\uffcc\076" +
    "\uffcc\077\uffcc\100\uffcc\101\uffcc\104\uffcc\001\002\000\150" +
    "\003\uffd3\005\uffd3\006\uffd3\012\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\041\uffd3\042\uffd3" +
    "\043\uffd3\050\uffd3\051\uffd3\052\105\053\103\054\101\055" +
    "\102\056\077\057\106\060\114\061\100\062\107\063\075" +
    "\064\104\065\112\066\111\070\uffd3\072\uffd3\073\uffd3\074" +
    "\uffd3\076\uffd3\077\uffd3\100\uffd3\101\uffd3\104\uffd3\001\002" +
    "\000\140\003\uffce\005\uffce\006\uffce\012\uffce\013\uffce\014" +
    "\uffce\015\uffce\016\uffce\017\uffce\020\uffce\021\uffce\022\uffce" +
    "\023\uffce\024\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\041\uffce" +
    "\042\uffce\043\uffce\050\uffce\051\uffce\052\105\053\103\054" +
    "\101\055\102\056\077\057\106\060\114\063\uffce\064\uffce" +
    "\070\uffce\072\uffce\073\uffce\074\uffce\076\uffce\077\uffce\100" +
    "\uffce\101\uffce\104\uffce\001\002\000\016\071\063\102\074" +
    "\103\066\104\073\106\062\107\065\001\002\000\042\050" +
    "\110\051\113\052\105\053\103\054\101\055\102\056\077" +
    "\057\106\060\114\061\100\062\107\063\075\064\104\065" +
    "\112\066\111\070\125\001\002\000\150\003\uffde\005\uffde" +
    "\006\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017" +
    "\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\041\uffde\042\uffde\043\uffde\050\uffde" +
    "\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde\057" +
    "\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde" +
    "\066\uffde\070\uffde\072\uffde\073\uffde\074\uffde\076\uffde\077" +
    "\uffde\100\uffde\101\uffde\104\uffde\001\002\000\150\003\uffd2" +
    "\005\uffd2\006\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\050\uffd2\051\uffd2\052\105\053\uffd2\054\uffd2\055\uffd2\056" +
    "\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\070\uffd2\072\uffd2\073\uffd2\074\uffd2\076" +
    "\uffd2\077\uffd2\100\uffd2\101\uffd2\104\uffd2\001\002\000\144" +
    "\003\uffd0\005\uffd0\006\uffd0\012\uffd0\013\uffd0\014\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\050\uffd0\051\uffd0\052\105\053\103\054\101\055" +
    "\102\056\077\057\106\060\114\061\100\062\107\065\112" +
    "\066\111\070\uffd0\072\uffd0\073\uffd0\074\uffd0\076\uffd0\077" +
    "\uffd0\100\uffd0\101\uffd0\104\uffd0\001\002\000\150\003\uffe3" +
    "\005\uffe3\006\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\050\uffe3\051\uffe3\052\105\053\uffe3\054\uffe3\055\102\056" +
    "\077\057\106\060\114\061\uffe3\062\uffe3\063\uffe3\064\uffe3" +
    "\065\uffe3\066\uffe3\070\uffe3\072\uffe3\073\uffe3\074\uffe3\076" +
    "\uffe3\077\uffe3\100\uffe3\101\uffe3\104\uffe3\001\002\000\150" +
    "\003\uffe1\005\uffe1\006\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033" +
    "\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\050\uffe1\051\uffe1\052\105\053\uffe1\054\uffe1\055" +
    "\uffe1\056\uffe1\057\106\060\uffe1\061\uffe1\062\uffe1\063\uffe1" +
    "\064\uffe1\065\uffe1\066\uffe1\070\uffe1\072\uffe1\073\uffe1\074" +
    "\uffe1\076\uffe1\077\uffe1\100\uffe1\101\uffe1\104\uffe1\001\002" +
    "\000\150\003\uffe2\005\uffe2\006\uffe2\012\uffe2\013\uffe2\014" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2" +
    "\023\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\050\uffe2\051\uffe2\052\105\053\uffe2\054" +
    "\uffe2\055\102\056\077\057\106\060\114\061\uffe2\062\uffe2" +
    "\063\uffe2\064\uffe2\065\uffe2\066\uffe2\070\uffe2\072\uffe2\073" +
    "\uffe2\074\uffe2\076\uffe2\077\uffe2\100\uffe2\101\uffe2\104\uffe2" +
    "\001\002\000\140\003\uffcf\005\uffcf\006\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf\030\uffcf\031" +
    "\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\050\uffcf\051\uffcf\052\105\053" +
    "\103\054\101\055\102\056\077\057\106\060\114\063\uffcf" +
    "\064\uffcf\070\uffcf\072\uffcf\073\uffcf\074\uffcf\076\uffcf\077" +
    "\uffcf\100\uffcf\101\uffcf\104\uffcf\001\002\000\150\003\uffe0" +
    "\005\uffe0\006\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\041\uffe0\042\uffe0\043\uffe0" +
    "\050\uffe0\051\uffe0\052\105\053\uffe0\054\uffe0\055\uffe0\056" +
    "\uffe0\057\106\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\070\uffe0\072\uffe0\073\uffe0\074\uffe0\076" +
    "\uffe0\077\uffe0\100\uffe0\101\uffe0\104\uffe0\001\002\000\010" +
    "\014\140\015\141\016\uffc4\001\002\000\062\003\030\006" +
    "\013\012\052\014\ufff7\015\ufff7\016\ufff7\017\017\021\ufff7" +
    "\022\022\026\ufff7\027\045\030\ufff7\031\044\032\ufff7\033" +
    "\015\034\021\035\033\036\040\041\ufff7\043\ufff7\076\ufff7" +
    "\100\032\101\031\104\014\001\002\000\026\014\ufff8\015" +
    "\ufff8\016\ufff8\021\ufff8\026\ufff8\030\ufff8\032\ufff8\041\ufff8" +
    "\043\ufff8\076\ufff8\001\002\000\036\003\030\006\013\012" +
    "\052\017\017\022\022\027\045\031\044\033\015\034\021" +
    "\035\033\036\040\100\032\101\031\104\014\001\002\000" +
    "\016\071\063\102\074\103\066\104\073\106\062\107\065" +
    "\001\002\000\004\016\uffc9\001\002\000\004\016\uffc6\001" +
    "\002\000\042\013\145\050\110\051\113\052\105\053\103" +
    "\054\101\055\102\056\077\057\106\060\114\061\100\062" +
    "\107\063\075\064\104\065\112\066\111\001\002\000\036" +
    "\003\030\006\013\012\052\017\017\022\022\027\045\031" +
    "\044\033\015\034\021\035\033\036\040\100\032\101\031" +
    "\104\014\001\002\000\010\014\140\015\141\016\uffc4\001" +
    "\002\000\004\016\uffc7\001\002\000\004\016\uffc5\001\002" +
    "\000\144\003\uffd1\005\uffd1\006\uffd1\012\uffd1\013\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\041\uffd1" +
    "\042\uffd1\043\uffd1\050\uffd1\051\uffd1\052\105\053\103\054" +
    "\101\055\102\056\077\057\106\060\114\061\100\062\107" +
    "\065\112\066\111\070\uffd1\072\uffd1\073\uffd1\074\uffd1\076" +
    "\uffd1\077\uffd1\100\uffd1\101\uffd1\104\uffd1\001\002\000\070" +
    "\003\uffca\005\uffca\006\uffca\012\uffca\014\uffca\015\uffca\016" +
    "\uffca\017\uffca\021\uffca\022\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\041\uffca\042\uffca\043\uffca\076\uffca\100\uffca\101\uffca" +
    "\104\uffca\001\002\000\042\050\110\051\113\052\105\053" +
    "\103\054\101\055\102\056\077\057\106\060\114\061\100" +
    "\062\107\063\075\064\104\065\112\066\111\072\154\001" +
    "\002\000\150\003\uffdd\005\uffdd\006\uffdd\012\uffdd\013\uffdd" +
    "\014\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\070\uffdd\072\uffdd" +
    "\073\uffdd\074\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd\104" +
    "\uffdd\001\002\000\040\003\030\006\013\012\052\017\017" +
    "\022\022\027\045\031\044\033\015\034\021\035\033\036" +
    "\040\040\160\100\032\101\031\104\014\001\002\000\004" +
    "\041\177\001\002\000\036\003\030\006\013\012\052\017" +
    "\017\022\022\027\045\031\044\033\015\034\021\035\033" +
    "\036\040\100\032\101\031\104\014\001\002\000\004\071" +
    "\161\001\002\000\004\104\014\001\002\000\006\072\uffa5" +
    "\074\173\001\002\000\012\044\171\045\172\046\170\047" +
    "\166\001\002\000\004\072\165\001\002\000\036\003\uffa7" +
    "\006\uffa7\012\uffa7\017\uffa7\022\uffa7\027\uffa7\031\uffa7\033" +
    "\uffa7\034\uffa7\035\uffa7\036\uffa7\100\uffa7\101\uffa7\104\uffa7" +
    "\001\002\000\046\003\uffe4\006\uffe4\010\uffe4\012\uffe4\017" +
    "\uffe4\022\uffe4\027\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4" +
    "\036\uffe4\040\uffe4\072\uffe4\074\uffe4\100\uffe4\101\uffe4\104" +
    "\uffe4\001\002\000\044\003\uffa4\006\uffa4\012\uffa4\017\uffa4" +
    "\022\uffa4\027\uffa4\031\uffa4\033\uffa4\034\uffa4\035\uffa4\036" +
    "\uffa4\040\uffa4\072\uffa4\074\uffa4\100\uffa4\101\uffa4\104\uffa4" +
    "\001\002\000\046\003\uffe5\006\uffe5\010\uffe5\012\uffe5\017" +
    "\uffe5\022\uffe5\027\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5" +
    "\036\uffe5\040\uffe5\072\uffe5\074\uffe5\100\uffe5\101\uffe5\104" +
    "\uffe5\001\002\000\046\003\uffe7\006\uffe7\010\uffe7\012\uffe7" +
    "\017\uffe7\022\uffe7\027\uffe7\031\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\040\uffe7\072\uffe7\074\uffe7\100\uffe7\101\uffe7" +
    "\104\uffe7\001\002\000\046\003\uffe6\006\uffe6\010\uffe6\012" +
    "\uffe6\017\uffe6\022\uffe6\027\uffe6\031\uffe6\033\uffe6\034\uffe6" +
    "\035\uffe6\036\uffe6\040\uffe6\072\uffe6\074\uffe6\100\uffe6\101" +
    "\uffe6\104\uffe6\001\002\000\004\104\014\001\002\000\004" +
    "\072\uffa6\001\002\000\004\041\176\001\002\000\044\003" +
    "\uffa8\005\uffa8\006\uffa8\012\uffa8\017\uffa8\022\uffa8\027\uffa8" +
    "\031\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\037\uffa8\042" +
    "\uffa8\100\uffa8\101\uffa8\104\uffa8\001\002\000\044\003\uffa9" +
    "\005\uffa9\006\uffa9\012\uffa9\017\uffa9\022\uffa9\027\uffa9\031" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\042\uffa9" +
    "\100\uffa9\101\uffa9\104\uffa9\001\002\000\016\071\uffc0\102" +
    "\uffc0\103\uffc0\104\uffc0\106\uffc0\107\uffc0\001\002\000\016" +
    "\071\063\102\074\103\066\104\073\106\062\107\065\001" +
    "\002\000\004\030\203\001\002\000\070\003\uffc3\005\uffc3" +
    "\006\uffc3\012\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\021" +
    "\uffc3\022\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\041\uffc3\042" +
    "\uffc3\043\uffc3\076\uffc3\100\uffc3\101\uffc3\104\uffc3\001\002" +
    "\000\042\020\205\050\110\051\113\052\105\053\103\054" +
    "\101\055\102\056\077\057\106\060\114\061\100\062\107" +
    "\063\075\064\104\065\112\066\111\001\002\000\036\003" +
    "\030\006\013\012\052\017\017\022\022\027\045\031\044" +
    "\033\015\034\021\035\033\036\040\100\032\101\031\104" +
    "\014\001\002\000\004\030\uffc2\001\002\000\004\032\210" +
    "\001\002\000\016\071\063\102\074\103\066\104\073\106" +
    "\062\107\065\001\002\000\126\003\uffb8\005\uffb8\006\uffb8" +
    "\012\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8\022" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043" +
    "\uffb8\050\110\051\113\052\105\053\103\054\101\055\102" +
    "\056\077\057\106\060\114\061\100\062\107\063\075\064" +
    "\104\065\112\066\111\076\uffb8\100\uffb8\101\uffb8\104\uffb8" +
    "\001\002\000\042\050\110\051\113\052\105\053\103\054" +
    "\101\055\102\056\077\057\106\060\114\061\100\062\107" +
    "\063\075\064\104\065\112\066\111\073\213\001\002\000" +
    "\070\003\uffac\005\uffac\006\uffac\012\uffac\014\uffac\015\uffac" +
    "\016\uffac\017\uffac\021\uffac\022\uffac\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036\uffac" +
    "\037\uffac\041\uffac\042\uffac\043\uffac\076\uffac\100\uffac\101" +
    "\uffac\104\uffac\001\002\000\070\003\uffaf\005\uffaf\006\uffaf" +
    "\012\uffaf\014\uffaf\015\uffaf\016\uffaf\017\uffaf\021\uffaf\022" +
    "\uffaf\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\034\uffaf\035\uffaf\036\uffaf\037\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\076\uffaf\100\uffaf\101\uffaf\104\uffaf\001\002\000\042" +
    "\050\110\051\113\052\105\053\103\054\101\055\102\056" +
    "\077\057\106\060\114\061\100\062\107\063\075\064\104" +
    "\065\112\066\111\073\217\001\002\000\070\003\uffad\005" +
    "\uffad\006\uffad\012\uffad\014\uffad\015\uffad\016\uffad\017\uffad" +
    "\021\uffad\022\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad\041\uffad" +
    "\042\uffad\043\uffad\076\uffad\100\uffad\101\uffad\104\uffad\001" +
    "\002\000\070\003\uffae\005\uffae\006\uffae\012\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\021\uffae\022\uffae\026\uffae\027" +
    "\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\041\uffae\042\uffae\043\uffae\076\uffae\100" +
    "\uffae\101\uffae\104\uffae\001\002\000\004\026\240\001\002" +
    "\000\004\011\222\001\002\000\016\071\063\102\074\103" +
    "\066\104\073\106\062\107\065\001\002\000\042\023\224" +
    "\050\110\051\113\052\105\053\103\054\101\055\102\056" +
    "\077\057\106\060\114\061\100\062\107\063\075\064\104" +
    "\065\112\066\111\001\002\000\016\071\063\102\074\103" +
    "\066\104\073\106\062\107\065\001\002\000\044\020\230" +
    "\024\232\050\110\051\113\052\105\053\103\054\101\055" +
    "\102\056\077\057\106\060\114\061\100\062\107\063\075" +
    "\064\104\065\112\066\111\001\002\000\004\026\uffb4\001" +
    "\002\000\004\026\uffb5\001\002\000\036\003\030\006\013" +
    "\012\052\017\017\022\022\027\045\031\044\033\015\034" +
    "\021\035\033\036\040\100\032\101\031\104\014\001\002" +
    "\000\004\026\uffb6\001\002\000\004\025\233\001\002\000" +
    "\004\107\234\001\002\000\004\020\235\001\002\000\036" +
    "\003\030\006\013\012\052\017\017\022\022\027\045\031" +
    "\044\033\015\034\021\035\033\036\040\100\032\101\031" +
    "\104\014\001\002\000\004\026\uffb2\001\002\000\004\026" +
    "\uffb3\001\002\000\070\003\uffb7\005\uffb7\006\uffb7\012\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\017\uffb7\021\uffb7\022\uffb7\026" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\041\uffb7\042\uffb7\043\uffb7\076" +
    "\uffb7\100\uffb7\101\uffb7\104\uffb7\001\002\000\004\071\242" +
    "\001\002\000\016\071\063\102\074\103\066\104\073\106" +
    "\062\107\065\001\002\000\004\072\247\001\002\000\044" +
    "\050\110\051\113\052\105\053\103\054\101\055\102\056" +
    "\077\057\106\060\114\061\100\062\107\063\075\064\104" +
    "\065\112\066\111\072\uff9c\074\245\001\002\000\016\071" +
    "\063\102\074\103\066\104\073\106\062\107\065\001\002" +
    "\000\004\072\uff9d\001\002\000\004\073\250\001\002\000" +
    "\070\003\uff9e\005\uff9e\006\uff9e\012\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\017\uff9e\021\uff9e\022\uff9e\026\uff9e\027\uff9e\030" +
    "\uff9e\031\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e" +
    "\037\uff9e\041\uff9e\042\uff9e\043\uff9e\076\uff9e\100\uff9e\101" +
    "\uff9e\104\uff9e\001\002\000\042\020\252\050\110\051\113" +
    "\052\105\053\103\054\101\055\102\056\077\057\106\060" +
    "\114\061\100\062\107\063\075\064\104\065\112\066\111" +
    "\001\002\000\006\014\254\076\253\001\002\000\016\071" +
    "\063\102\074\103\066\104\073\106\062\107\065\001\002" +
    "\000\004\013\262\001\002\000\004\021\uffbb\001\002\000" +
    "\004\021\261\001\002\000\010\014\254\021\uffbc\076\253" +
    "\001\002\000\004\021\uffbd\001\002\000\070\003\uffbe\005" +
    "\uffbe\006\uffbe\012\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\021\uffbe\022\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\076\uffbe\100\uffbe\101\uffbe\104\uffbe\001" +
    "\002\000\036\003\030\006\013\012\052\017\017\022\022" +
    "\027\045\031\044\033\015\034\021\035\033\036\040\100" +
    "\032\101\031\104\014\001\002\000\004\021\uffb9\001\002" +
    "\000\042\050\110\051\113\052\105\053\103\054\101\055" +
    "\102\056\077\057\106\060\114\061\100\062\107\063\075" +
    "\064\104\065\112\066\111\077\265\001\002\000\004\013" +
    "\266\001\002\000\036\003\030\006\013\012\052\017\017" +
    "\022\022\027\045\031\044\033\015\034\021\035\033\036" +
    "\040\100\032\101\031\104\014\001\002\000\010\014\uffba" +
    "\021\uffba\076\uffba\001\002\000\042\050\110\051\113\052" +
    "\105\053\103\054\101\055\102\056\077\057\106\060\114" +
    "\061\100\062\107\063\075\064\104\065\112\066\111\073" +
    "\271\001\002\000\070\003\uff9f\005\uff9f\006\uff9f\012\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\017\uff9f\021\uff9f\022\uff9f\026" +
    "\uff9f\027\uff9f\030\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\036\uff9f\037\uff9f\041\uff9f\042\uff9f\043\uff9f\076" +
    "\uff9f\100\uff9f\101\uff9f\104\uff9f\001\002\000\004\104\014" +
    "\001\002\000\056\003\uffe9\006\uffe9\007\uffe9\011\uffe9\012" +
    "\uffe9\017\uffe9\022\uffe9\027\uffe9\031\uffe9\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\040\uffe9\044\uffe9\045\uffe9\046\uffe9\047" +
    "\uffe9\071\uffe9\100\uffe9\101\uffe9\104\uffe9\001\002\000\004" +
    "\007\275\001\002\000\012\044\171\045\172\046\170\047" +
    "\166\001\002\000\004\010\277\001\002\000\016\071\063" +
    "\102\074\103\066\104\073\106\062\107\065\001\002\000" +
    "\042\050\110\051\113\052\105\053\103\054\101\055\102" +
    "\056\077\057\106\060\114\061\100\062\107\063\075\064" +
    "\104\065\112\066\111\073\301\001\002\000\070\003\uffea" +
    "\005\uffea\006\uffea\012\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\021\uffea\022\uffea\026\uffea\027\uffea\030\uffea\031\uffea" +
    "\032\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\041" +
    "\uffea\042\uffea\043\uffea\076\uffea\100\uffea\101\uffea\104\uffea" +
    "\001\002\000\016\071\063\102\074\103\066\104\073\106" +
    "\062\107\065\001\002\000\042\050\110\051\113\052\105" +
    "\053\103\054\101\055\102\056\077\057\106\060\114\061" +
    "\100\062\107\063\075\064\104\065\112\066\111\073\304" +
    "\001\002\000\070\003\uffcb\005\uffcb\006\uffcb\012\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\021\uffcb\022\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\041\uffcb\042\uffcb\043\uffcb\076\uffcb" +
    "\100\uffcb\101\uffcb\104\uffcb\001\002\000\040\003\030\006" +
    "\013\012\052\017\017\022\022\027\045\031\044\033\015" +
    "\034\021\035\033\036\040\040\160\100\032\101\031\104" +
    "\014\001\002\000\004\043\312\001\002\000\036\003\030" +
    "\006\013\012\052\017\017\022\022\027\045\031\044\033" +
    "\015\034\021\035\033\036\040\100\032\101\031\104\014" +
    "\001\002\000\004\043\311\001\002\000\044\003\uffa0\005" +
    "\uffa0\006\uffa0\012\uffa0\017\uffa0\022\uffa0\027\uffa0\031\uffa0" +
    "\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0\042\uffa0\100" +
    "\uffa0\101\uffa0\104\uffa0\001\002\000\044\003\uffa1\005\uffa1" +
    "\006\uffa1\012\uffa1\017\uffa1\022\uffa1\027\uffa1\031\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1\042\uffa1\100\uffa1" +
    "\101\uffa1\104\uffa1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\006\002\005\003\004\001\001\000\060\004" +
    "\053\005\056\006\023\014\052\015\054\017\011\020\017" +
    "\024\040\030\036\033\015\034\026\041\035\042\025\043" +
    "\024\045\033\046\047\047\046\053\034\054\042\055\041" +
    "\056\045\057\055\061\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\162\052\304\001\001\000\002\001\001\000\004\017" +
    "\273\001\001\000\002\001\001\000\012\010\267\011\071" +
    "\012\067\013\063\001\001\000\002\001\001\000\012\010" +
    "\250\011\071\012\067\013\063\001\001\000\002\001\001" +
    "\000\004\017\240\001\001\000\006\017\220\035\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\010\214\011\071" +
    "\012\067\013\063\044\213\057\215\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\211\011\071\012\067\013\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\006\135\007\206\014\052\015\054\017\011\020\017\024" +
    "\040\030\036\033\015\034\026\041\035\042\025\043\024" +
    "\056\045\057\055\061\022\001\001\000\006\031\201\032" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\154\001\001\000\014\010\070\011" +
    "\071\012\067\013\063\021\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\004\057\005\056\006\023\014\052\015\054\017\011" +
    "\020\017\024\040\030\036\033\015\034\026\041\035\042" +
    "\025\043\024\045\033\046\047\047\046\053\034\054\042" +
    "\055\041\056\045\057\055\061\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\152" +
    "\011\071\012\067\013\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\010\150\011\071\012\067" +
    "\013\063\001\001\000\042\006\135\007\134\014\052\015" +
    "\054\017\011\020\017\024\040\030\036\033\015\034\026" +
    "\041\035\042\025\043\024\056\045\057\055\061\022\001" +
    "\001\000\012\010\133\011\071\012\067\013\063\001\001" +
    "\000\012\010\132\011\071\012\067\013\063\001\001\000" +
    "\012\010\131\011\071\012\067\013\063\001\001\000\012" +
    "\010\130\011\071\012\067\013\063\001\001\000\012\010" +
    "\127\011\071\012\067\013\063\001\001\000\012\010\126" +
    "\011\071\012\067\013\063\001\001\000\012\010\125\011" +
    "\071\012\067\013\063\001\001\000\002\001\001\000\012" +
    "\010\121\011\071\012\067\013\063\001\001\000\012\010" +
    "\120\011\071\012\067\013\063\001\001\000\012\010\117" +
    "\011\071\012\067\013\063\001\001\000\012\010\116\011" +
    "\071\012\067\013\063\001\001\000\012\010\115\011\071" +
    "\012\067\013\063\001\001\000\012\010\114\011\071\012" +
    "\067\013\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\010\123\011\071\012\067\013\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\022\141\023\142\001\001\000\042\006\135\007\136" +
    "\014\052\015\054\017\011\020\017\024\040\030\036\033" +
    "\015\034\026\041\035\042\025\043\024\056\045\057\055" +
    "\061\022\001\001\000\002\001\001\000\042\006\135\007" +
    "\147\014\052\015\054\017\011\020\017\024\040\030\036" +
    "\033\015\034\026\041\035\042\025\043\024\056\045\057" +
    "\055\061\022\001\001\000\012\010\143\011\071\012\067" +
    "\013\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\006\135\007\145\014\052\015\054" +
    "\017\011\020\017\024\040\030\036\033\015\034\026\041" +
    "\035\042\025\043\024\056\045\057\055\061\022\001\001" +
    "\000\006\022\146\023\142\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\006\135\007\155\014" +
    "\052\015\054\017\011\020\017\024\040\030\036\033\015" +
    "\034\026\041\035\042\025\043\024\050\156\056\045\057" +
    "\055\061\022\001\001\000\002\001\001\000\042\006\135" +
    "\007\174\014\052\015\054\017\011\020\017\024\040\030" +
    "\036\033\015\034\026\041\035\042\025\043\024\056\045" +
    "\057\055\061\022\001\001\000\002\001\001\000\010\017" +
    "\162\051\163\052\161\001\001\000\002\001\001\000\004" +
    "\016\166\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\017\162\051\173\052" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\203\011\071\012\067\013\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\006\135\007" +
    "\205\014\052\015\054\017\011\020\017\024\040\030\036" +
    "\033\015\034\026\041\035\042\025\043\024\056\045\057" +
    "\055\061\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\210\011\071\012\067\013\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\222" +
    "\011\071\012\067\013\063\001\001\000\002\001\001\000" +
    "\012\010\224\011\071\012\067\013\063\001\001\000\010" +
    "\036\226\037\225\040\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\006\135\007\236\014\052\015\054" +
    "\017\011\020\017\024\040\030\036\033\015\034\026\041" +
    "\035\042\025\043\024\056\045\057\055\061\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\006\135\007\235\014\052\015\054" +
    "\017\011\020\017\024\040\030\036\033\015\034\026\041" +
    "\035\042\025\043\024\056\045\057\055\061\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\243\011\071\012\067\013\063" +
    "\060\242\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\010\243\011\071\012\067\013\063\060\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\025\256\026\255\027\254\001\001" +
    "\000\012\010\263\011\071\012\067\013\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\025\256\026\257\027\254\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\006\135\007\262\014\052\015\054" +
    "\017\011\020\017\024\040\030\036\033\015\034\026\041" +
    "\035\042\025\043\024\056\045\057\055\061\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\006\135\007\266\014\052\015\054\017\011\020\017" +
    "\024\040\030\036\033\015\034\026\041\035\042\025\043" +
    "\024\056\045\057\055\061\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\272\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\275" +
    "\001\001\000\002\001\001\000\012\010\277\011\071\012" +
    "\067\013\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\010\302\011\071\012\067\013\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\006\135\007\305" +
    "\014\052\015\054\017\011\020\017\024\040\030\036\033" +
    "\015\034\026\041\035\042\025\043\024\050\306\056\045" +
    "\057\055\061\022\001\001\000\002\001\001\000\042\006" +
    "\135\007\307\014\052\015\054\017\011\020\017\024\040" +
    "\030\036\033\015\034\026\041\035\042\025\043\024\056" +
    "\045\057\055\061\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //public static LinkedList<Errores> errores  = new LinkedList<Errores>();
    //public static Nodo raiz;
    //public Nodo getRaiz(){
    //    return raiz;
    //}
    public LinkedList<Instrucciones> AST;

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico recuperable en la Línea " + (s.left) + " Columna "+s.right+ ". No se esperaba este componente: " +s.value);
        //Errores tmp = new Errores("(Error Sintactico recuperable: " + s.value + ")" , "Sintactico recuperable", (s.left), (s.right));
        //errores.add(tmp);
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + (s.left)+ " Columna "+s.right+". Componente " + s.value + " no reconocido");
        //Errores tmp = new Errores("(Error Sintactico no recuperable: " + s.value + ")" , "Sintactico no recuperable", (s.left), (s.right));
        //errores.add(tmp);
    }
    
    public LinkedList<Instrucciones> getAST(){
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= codigo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // codigo ::= PR_INICIO principal PR_FIN 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.AST=(LinkedList<Instrucciones>) b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // codigo ::= PR_INICIO PR_FIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("codigo",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // principal ::= opciones principal 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // principal ::= opciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // opciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // opciones ::= funcion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // opciones ::= metodo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("opciones",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= instruccion instrucciones 
            {
              LinkedList<Instrucciones> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Instrucciones> a = (LinkedList<Instrucciones>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=a; RESULT=(LinkedList<Instrucciones>) b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instrucciones ::= instruccion 
            {
              LinkedList<Instrucciones> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= new LinkedList<>(); RESULT.add((Instrucciones) a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= declaracion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= asignacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= si 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= segun 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= repetir 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= para 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= impresiones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= retornar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= ejecutar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= comentarios 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion ::= PR_INGRESAR lista_variables PR_COMO tipo_dato PR_CON_VALOR operacion SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_variables ::= IDENTIFICADOR SB_COMA lista_variables 
            {
              LinkedList<String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_variables ::= IDENTIFICADOR 
            {
              LinkedList<String> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo_dato ::= PR_NUMERO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo_dato ::= PR_CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipo_dato ::= PR_BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // tipo_dato ::= PR_CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_dato",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operacion ::= operacion OP_SUMA operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operacion ::= operacion OP_RESTA operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operacion ::= operacion OP_MULTIPLICACION operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operacion ::= operacion OP_DIVISION operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operacion ::= operacion OP_MODULO operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operacion ::= operacion OP_POTENCIA SB_CORCHETE_LEFT operacion SB_CORCHETE_RIGHT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operacion ::= SB_PARENTESIS_LEFT operacion SB_PARENTESIS_RIGHT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operacion ::= relacional 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operacion ::= logicos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operacion ::= dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // dato ::= DIGITOS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // dato ::= CADENA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dato ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dato ::= CARACTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dato ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dato",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // logicos ::= operacion OP_OR operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // logicos ::= operacion OP_AND operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // logicos ::= operacion OP_NOT operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicos",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // relacional ::= operacion OP_IGUAL operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacional",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // relacional ::= operacion OP_ES_DIFERENTE operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacional",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // relacional ::= operacion OP_MAYOR_QUE operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacional",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // relacional ::= operacion OP_MENOR_QUE operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacional",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // relacional ::= operacion OP_MAYOR_IGUAL operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacional",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // relacional ::= operacion OP_MENOR_IGUAL operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("relacional",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asignacion ::= lista_variables PR_ASIGNACION operacion SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // si ::= PR_SI ciclo_si PR_FIN_SI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("si",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ciclo_si ::= operacion PR_ENTONCES instrucciones o_si 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_si",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ciclo_si ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_si",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // o_si ::= PR_O_SI operacion PR_ENTONCES instrucciones o_si 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_si",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // o_si ::= delo_contrario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_si",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // delo_contrario ::= PR_DE_LO_CONTRARIO instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("delo_contrario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // delo_contrario ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("delo_contrario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // while ::= PR_MIENTRAS ciclo_while PR_FIN_MIENTRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ciclo_while ::= not operacion PR_HACER instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ciclo_while ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_while",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // not ::= OP_NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("not",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // not ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("not",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // segun ::= PR_SEGUN operacion PR_HACER casos PR_FIN_SEGUN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("segun",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // casos ::= caso casos 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // casos ::= caso 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // casos ::= segun_contrario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("casos",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // caso ::= SB_INTERROGACION_LEFT operacion SB_INTERROGACION_RIGHT PR_ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("caso",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // segun_contrario ::= PR_DE_LO_CONTRARIO PR_ENTONCES instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("segun_contrario",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // repetir ::= PR_REPETIR instrucciones PR_HASTA_QUE operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("repetir",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // para ::= PR_PARA ciclo_para PR_FIN_PARA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("para",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ciclo_para ::= lista_variables PR_ASIGNACION operacion PR_HASTA operacion lista_para 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ciclo_para",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lista_para ::= hacer 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_para",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lista_para ::= con_incremental 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_para",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // hacer ::= PR_HACER instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("hacer",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // con_incremental ::= PR_CON PR_INCREMENTAL DIGITOS PR_HACER instrucciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("con_incremental",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // impresiones ::= impresionL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresiones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // impresiones ::= impresionM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresiones",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // impresionL ::= PR_IMPRIMIR impr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresionL",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // impr ::= operacion SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // impr ::= ejecutar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("impr",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // impresionM ::= PR_IMPRIMIR_NL operacion SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=new Imprimir((String) b,1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("impresionM",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // metodo ::= metodo1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // metodo ::= metodo2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // metodo1 ::= PR_METODO lista_variables instrucciones PR_FIN_METODO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo1",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // metodo2 ::= PR_METODO lista_variables parametros instrucciones PR_FIN_METODO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("metodo2",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // parametros ::= PR_CON_PARAMETROS SB_PARENTESIS_LEFT lista_parametros SB_PARENTESIS_RIGHT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // lista_parametros ::= variable SB_COMA lista_parametros 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // lista_parametros ::= variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_parametros",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // variable ::= lista_variables tipo_dato 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // funcion ::= funcion1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // funcion ::= funcion2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // funcion1 ::= PR_FUNCION variable instrucciones PR_FIN_FUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion1",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // funcion2 ::= PR_FUNCION variable parametros instrucciones PR_FIN_FUNCION 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // retornar ::= PR_RETORNAR operacion SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("retornar",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ejecutar ::= PR_EJECUTAR lista_variables SB_PARENTESIS_LEFT lista_operaciones SB_PARENTESIS_RIGHT SB_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ejecutar",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lista_operaciones ::= operacion SB_COMA lista_operaciones 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_operaciones",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lista_operaciones ::= operacion 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_operaciones",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // comentarios ::= COMENTARIO1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentarios",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // comentarios ::= COMENTARIO2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comentarios",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
